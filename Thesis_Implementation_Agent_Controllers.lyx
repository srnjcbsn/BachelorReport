#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Agent Controller
\end_layout

\begin_layout Standard
The agent controller is designed specifically to be able to accommodate
 all types of APL.
 This means that a lot of special care had to be taken in order for us to
 impose as few restrictions as possible.
 This section will focus on the different designs we went through and why
 we eventually landed on the design we have now.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImplementationAgentControllerSequenceDiagram.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This image details exactly how an 
\family typewriter
AgentManager
\family default
 Processes incoming requests from an outside AP 
\begin_inset CommandInset label
LatexCommand label
name "fig:ImplementationAgentControllerSequenceDiagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Explanation
\end_layout

\begin_layout Standard
The 
\family typewriter
AgentManager
\family default
 is designed to run separately from the engineâ€™s model thread, which means
 it has the ability to take all the time needed to properly connect to an
 outside AP, same goes for the 
\family typewriter
AgentController
\family default
.
 This means that when an 
\family typewriter
AgentManager
\family default
 generates a new 
\family typewriter
AgentController
\family default
 to be used by the AP, it also generates a new thread which the 
\family typewriter
AgentController
\family default
 is executed on.
 In the System Features section we covered how 
\family typewriter
AgentController
\family default
s are used.
 Here we will elaborate on the exact process.
 In fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ImplementationAgentControllerSequenceDiagram"

\end_inset

, a sequence diagram is shown that looks familiar to the one shown in the
 system features.
 However there are a few key differences.
 First, this sequence diagram shows the complete life cycle of an 
\family typewriter
AgentManager
\family default
, since the 
\family typewriter
AgentManager
\family default
 is running on its own thread it does not care about blocking until work
 needs to be done and the only kind of work it is responsible for is ensure
 that 
\family typewriter
AgentController
\family default
s are generated for APs in need of them.
 Second, it also details that 
\family typewriter
AgentController
\family default
s are in fact generated by the 
\family typewriter
AgentManager
\family default
 with its own thread.
\end_layout

\begin_layout Subsection*
Considerations
\end_layout

\begin_layout Standard
The 
\family typewriter
AgentManager
\family default
 went through many design iterations in order to arrive at its present state.
 Originally, the 
\family typewriter
AgentManager
\family default
 was called 
\family typewriter
AgentServer
\family default
.
 The reason was that for another language to interface with the language
 of the engine -- C# -- there must be a universal way of connecting the
 two languages.
 A way in which practically no languages was prohibited from interacting,
 and as we thought such a way could only be achieved through a TCP connecting
 since the protocol for TPC connections is very old and as such usable in
 most languages by far.
 While it is true that probably almost all languages do require a TCP connecting
 in order for them to work with our engine, it is not true for languages
 that the engine understand, considering that all the .NET platform languages
 works together very well.
 For example, you could use the functional programming language F#, which
 also runs on the .NET platform.
 As such, if we imposed that all 
\family typewriter
AgentManager
\family default
s are 
\family typewriter
AgentServer
\family default
s, it would be required to setup a server just for using a language which
 the engine already understands.
 There is also that our goal for the engine was to be general as possible
 and since an 
\family typewriter
AgentServer
\family default
 is more restrictive than an 
\family typewriter
AgentManger
\family default
, then 
\family typewriter
AgentManager
\family default
 is the design we went with.
\end_layout

\begin_layout Subsection*
Summary
\end_layout

\begin_layout Standard

\family typewriter
AgentManager
\family default
 and 
\family typewriter
AgentController
\family default
 is designed as a framework for making an interface between an APL and the
 engine.
 They are intentionally made very lightweight so that they do not prohibit
 any special requirements of any given APL.
\end_layout

\end_body
\end_document
