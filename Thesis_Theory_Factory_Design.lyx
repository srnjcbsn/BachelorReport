#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{alltt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Factory Design Pattern
\end_layout

\begin_layout Standard
Removing flexibility from a program is normally considered a poor design
 decision.
 One way to do that however would be by tying object creation to the business
 logic of the program.
 This section will show why this combining of object creation and business
 logic actually removes flexibility in the program.
 Furthermore it will show how to solve this problem using the Factory Design
 Pattern.
 We refer to 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cite{WikiFactory}
\end_layout

\end_inset

 for an explanation of the subject.
\end_layout

\begin_layout Subsection*
Why object creation logic should be removed from business logic
\end_layout

\begin_layout Standard
In all OOP
\begin_inset Foot
status open

\begin_layout Plain Layout
Object Oriented Programming
\end_layout

\end_inset

 languages you have the ability to create new objects to be used in the
 program.
 When instantiating an object in a function, you inadvertently tie a specific
 object type to that function.
 This means that the function can never be used for other purposes than
 to work with that type of object.
 Thus if an identical function was needed but for another version of that
 object you would have to copy the function redundantly, greatly increasing
 the chance of errors in the code as the same code was written twice.
\end_layout

\begin_layout Standard
To give an example of this, imagine you have a Printer that prints text
 on sheet of paper, the pseudo code for such a printer would look like this:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Class Printer 
\end_layout

\begin_layout Plain Layout

    Method PrintPaper takes Message returns Paper
\end_layout

\begin_layout Plain Layout

        Paper = new A4Sheet() 		
\end_layout

\begin_layout Plain Layout

        Paper.PrintText(Message) 		
\end_layout

\begin_layout Plain Layout

        Return Paper 	
\end_layout

\begin_layout Plain Layout

    endMethod 
\end_layout

\begin_layout Plain Layout

endClass
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we can see in this example, 
\family typewriter
A4Sheet
\family default
 is an implementation of the object type 
\family typewriter
Paper
\family default
, however as we have mixed object creation with business logic, we are forced
 to specify the exact type of paper that our printer produces.
 This means that if we wanted to make the printer able to print multiple
 types of paper, we would have to make new functions copying the functionality
 of 
\family typewriter
PrintPaper
\family default
 we would have to make 
\family typewriter
PrintPaperA3
\family default
, 
\family typewriter
PrintPaperA5
\family default
, etc.
 As is evident, this is very redundant and increases code complexity.
 Not only that, but if years later someone invented a new type of paper,
 the printer would have to be completely changed, since the class was locked
 to specific paper types on the business logic level.
 
\end_layout

\begin_layout Subsection*
Solving the problem of mixing object creation with business logic
\end_layout

\begin_layout Standard
As we have shown, there are many problems involved when business logic contains
 object creation logic.
 In order to solve this problem it is necessary to separate the two.
 This can be done in multiple ways.
 Consider our previous printer example.
 In this case, instead of having the method 
\family typewriter
PrintPaper 
\family default
take only a message, it could also take paper as part of its arguments.
 This way we would avoid having to create the Paper as part of printing
 it.
 However, this would only move the problem from the 
\family typewriter
PrintPaper
\family default
 method to the business logic that is calling it.
 It also changes the overall functionality of the method which was to produce
 paper with messages on them and instead makes it so it doesn’t produce
 the paper and only prints on paper given to it.
 Using the factory design pattern we can avoid both problems while at the
 same time separate the object creation away from the 
\family typewriter
PrintPaper 
\family default
method.
 We do this by giving the 
\family typewriter
Printer 
\family default
class a factory which we will name 
\family typewriter
PaperFactory
\family default
.
\end_layout

\begin_layout Standard
The 
\family typewriter
PaperFactory
\family default
 only has one task and that is to create Paper objects.
 That means we have moved the object creation code away from the 
\family typewriter
PrintPaper 
\family default
method; all the 
\family typewriter
PrintPaper 
\family default
method has to do is simply request a new piece of paper from the 
\family typewriter
PaperFactory
\family default
.
\end_layout

\begin_layout Standard
The pseudo code for the 
\family typewriter
PaperFactory 
\family default
could look something like this:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Class PaperFactory 	
\end_layout

\begin_layout Plain Layout

    Method CreatePaper takes nothing returns Paper
\end_layout

\begin_layout Plain Layout

        Return new A4() 
\end_layout

\begin_layout Plain Layout

    endMethod 
\end_layout

\begin_layout Plain Layout

endClass
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the pseudo code for the new 
\family typewriter
PrintPaper
\family default
 method of the 
\family typewriter
Printer 
\family default
class would be this:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Method PrintPaper takes paperFactory, message returns paper
\end_layout

\begin_layout Plain Layout

    Paper = paperFactory.CreatePaper()
\end_layout

\begin_layout Plain Layout

    Paper.Print(message) 	
\end_layout

\begin_layout Plain Layout

    Return Paper 
\end_layout

\begin_layout Plain Layout

endMethod	
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thus as we can see the responsibility of creating paper has been removed
 from the 
\family typewriter
Printer 
\family default
class and instead moved to the 
\family typewriter
PaperFactory 
\family default
class.
\end_layout

\begin_layout Subsection
Abstract Factory Design Pattern
\end_layout

\begin_layout Standard
The abstract factory design pattern is closely tied to Factory design pattern
 in that an abstract Factory like an abstract class only defines specification
 of the implementing class, and doesn’t contain any logic at all.
 
\end_layout

\begin_layout Standard
An Abstract Factory is made by making an Abstract class of the factory.
 Going back to Printer example, imagine that the 
\family typewriter
PaperFactory 
\family default
instead was an abstract class, as displayed below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Abstract class PaperFactory 	
\end_layout

\begin_layout Plain Layout

    Method CreatePaper takes nothing returns Paper 
\end_layout

\begin_layout Plain Layout

endClass
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now the Printer class only has to know about a Factory capable of producing
 Paper, but it will have no information on what kind of paper is produced,
 an implementation of the 
\family typewriter
PaperFactory 
\family default
could now be made for each type of paper that one wishes to produce.
\end_layout

\begin_layout Standard
For instance an implementation of the for creating A4 papers could be designed
 like this:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Class A4PaperFactory implements PaperFactory 	
\end_layout

\begin_layout Plain Layout

    Method CreatePaper takes nothing returns paper 
\end_layout

\begin_layout Plain Layout

        Return new A4Paper() 	
\end_layout

\begin_layout Plain Layout

    endMethod 
\end_layout

\begin_layout Plain Layout

endClass
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we can see, the 
\family typewriter
A4PaperFactory 
\family default
class -- which is an implementation of the 
\family typewriter
PaperFactory 
\family default
class -- is capable of producing a special type of paper.
 As such if this factory was used by the 
\family typewriter
Printer 
\family default
class we saw in an earlier example, the 
\family typewriter
Printer 
\family default
would be capable of producing A4 papers with messages on them.
 However were we to want another type of paper, the code for the printer
 would not need to be changed or copied since we simply implement a new
 version of the 
\family typewriter
PaperFactory 
\family default
class and give that to the 
\family typewriter
Paper 
\family default
class.
\end_layout

\begin_layout Section*
Summary
\end_layout

\begin_layout Standard
A lot of problems arise in code when mixing business logic with object creation
 logic, this section has explained why the problems occur and what the reasons
 behind them are.
 Furthermore it has shown how to solve these problems by using the factory
 design pattern.
 
\end_layout

\begin_layout Standard
To summarize some of the problems when mixing business logic with object
 creation logic:
\end_layout

\begin_layout Itemize
Increases the complexity in business logic, because of added creation logic
\end_layout

\begin_layout Itemize
Removes flexibility of the business logic, forcing it to work only with
 special classes
\end_layout

\begin_layout Itemize
Increase the need for redundancy of business logic to accommodate for new
 object types
\end_layout

\begin_layout Itemize
Makes changing legacy code difficult, as the code is tied to specific object
 types
\end_layout

\end_body
\end_document
