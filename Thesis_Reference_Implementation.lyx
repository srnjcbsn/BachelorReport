#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this section we will introduce our reference implementation (henceforth
 sometimes called the 
\emph on
package grabber scenario
\emph default
), which we have developed to showcase and test our engine.
 It will also serve as an example of using the engine as well as the extensions
 we have provided.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "ImplementationRefImpl"

\end_inset

, we will detail the actual implementation of the scenario in the engine,
 the agent programs, as well as the integration of the two.
 A less complex example, which describes the simple vacuum world (Russel,
 Norvig, 2010, p 35), can be found in appendix
\family typewriter
\emph on
 
\begin_inset CommandInset ref
LatexCommand ref
reference "HelloWorld"

\end_inset


\family default
\emph default
.
\end_layout

\begin_layout Standard
The reference implementation is intended to cover as many of the engine
 features and extensions as possible, while not focusing on creating any
 particularly revolutionary artificial intelligence.
 As such, we have set up a world that is relativively simple with respect
 to the action and perception repetoire of the agents, and with an environment
 representation limited in complexity.
 Thus, the interesting part of the reference implementation is not the scenario
 itself, but rather the actual implementation.
 That being said, the scenario is as follows:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TileWorldColoredScrot.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An initial configuration of the package grabber scenario.
 
\family typewriter
D
\family default
 (red) marks the dropzone, 
\family typewriter
X
\family default
s (green) are packages, 
\family typewriter
A
\family default
s (black) are agents and 
\family typewriter
W
\family default
s (grey) are walls
\begin_inset CommandInset label
LatexCommand label
name "fig:maze-scrot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The agents in the scenario are tasked with exploring a maze in a discrete
 two dimensional grid of tiles in order to locate 
\family typewriter
package
\family default
s and bring them to a special tile called the 
\family typewriter
dropzone
\family default
 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:maze-scrot"

\end_inset

).
 A tile in this scenario can contain several objects, unless they are explicitly
 forbidden to occupy the same square.
 An agent, for example, can not move into a tile that already contains another
 agent, but it can move into a square containing a package or a dropzone.
 Importantly, a tile containing a 
\family typewriter
wall
\family default
 cannot contain anything else, thus the tiles between walls constitutes
 the navigable pathway of the maze.
 
\end_layout

\begin_layout Subsection*
Actions
\end_layout

\begin_layout Standard
The three actions 
\emph on
moving
\emph default
, 
\emph on
grabbing
\emph default
 and 
\emph on
dropping
\emph default
 are enough for the agents to fulfill their task, and as such they describe
 the complete action specification:
\end_layout

\begin_layout Description

\family typewriter
move(
\emph on
Direction
\emph default
)
\family default
 moves the agent one tile in the specified 
\family typewriter
\emph on
Direction
\family default
\emph default
.
 
\family typewriter
\emph on
Direction
\family default
 
\emph default
is limited to the four cardinal directions, so an agent can only move to
 an immediately adjacent square.
 Note that every tile not containing a wall is reachable from every other
 such tile in the maze when following this movement rule.
\end_layout

\begin_layout Description

\family typewriter
grab
\family default
 removes the package in the same tile as the agent (if any) from the world,
 and marks the agent as carrying a package.
\end_layout

\begin_layout Description

\family typewriter
drop
\family default
 adds a package to the world in the same tile as the agent (if it is carrying
 a package) and marks the agent as not carrying a package.
 If a tile is dropped at a dropzone, it is removed from the world.
\end_layout

\begin_layout Standard
Note that this action specification does not mention any means of communicating
 or otherwise cooperating, which is an otherwise important feature of any
 multi-agent system.
 We have not implemented such functionality in the XMAS engine, although
 it would be a high priority task if we were to develop it further.
 Normally, GOAL provides built-in communication devices, which we cannot
 use in the reference implementation, for reasons explained in the implementatio
n section.
 In general, although several grabber agents can inhabit the scenario, they
 will not actively work together or compete, although they will try to accomplis
h the same goals.
\end_layout

\begin_layout Subsection*
Percepts
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TileWorldColoredScrotVision.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Here we see the visible tiles for the agent in the middle of the colored
 section.
 Tiles colored in green are visible to the agent while tiles in red are
 are blocked by walls.
 All other tiles are outside the agents visibility range, and thus invisible.
 As can be seen, agents are good at peeking around corners.
\begin_inset CommandInset label
LatexCommand label
name "fig:maze-scrot-vision"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now that agents can act in the environment, they must also be able to sense
 their surroundings in order to make informed choices about their course
 of action.
 For this purpose, the following three percepts can be obtained from the
 world:
\end_layout

\begin_layout Description
Vision: A rather obvious perception device in this scenario is 
\emph on
vision
\emph default
, allowing an agent to learn the contents of tiles around it.
 Each agent can can see a distance of five tiles in any direction, assuming
 there is no walls or other agents blocking its vision.
 See fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:maze-scrot-vision"

\end_inset

 for an illustration.
\end_layout

\begin_layout Description
Package
\begin_inset space ~
\end_inset

Possession: Specifies whether the agent is currently holding a package.
 An agent can only hold one package at a time.
 This truth value could be mangaged by the agent program, but having it
 as a percept is easier on the AP.
 Additionally, an effect could forcibly remove a package from an agent,
 and we would thus need a percept for that (note that such an effect does
 not currently exist in the scenario).
 With our current approach, we provide a snapshot of the state of the perceivabl
e world through percepts and let the AP make of it what it can.
\end_layout

\begin_layout Description
Position: The absolute position of the agent in the grid.
 In the agent program, we initially used positions relative to the starting
 position of the agent to build a map of maze.
 However, using this method we would lose track if the agent was forcibly
 pushed into another tile (again, such an effect does not exist in this
 scenario).
\end_layout

\begin_layout Standard
Additionally, agents receive their current movement speed (the time it takes
 to move from one tile to an adjacent one) as a percept, although we do
 not use it in this scenario.
\end_layout

\begin_layout Subsection*
Agent Program
\end_layout

\begin_layout Standard
We have implemented the agent logic for the grabber agent in the GOAL agent
 programming language.
 The GOAL instance is connected to an EIS environment, which communicates
 with the XMAS engine by sending actions and receiving percepts.
\end_layout

\begin_layout Standard
It will try to find all packages in the maze and bring them to the dropzone.
 Note that since packages might be hidden in places the agent has not yet
 looked, the requirement for scenario completion is not just that no more
 packages can be 
\emph on
seen 
\emph default
on the map, but also that there are no more tiles to explore.
\end_layout

\begin_layout Standard
In order to find all the hidden packages, the agent must explore the maze
 by moving to tiles it has not stood on before in order to gain vision of
 other tiles and pathways.
 The agent logic itself is pretty straight forward; it can be summarized
 as below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout


\backslash
textit{if} I hold a package 
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{and} know the location of the dropzone
\end_layout

\begin_layout Plain Layout

    
\backslash
textit{then} go to the dropzone and drop it
\end_layout

\begin_layout Plain Layout


\backslash
textit{if} I have no package 
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{and} know the location of one 
\end_layout

\begin_layout Plain Layout

    
\backslash
textit{then} go grab the package
\end_layout

\begin_layout Plain Layout


\backslash
textit{otherwise}, 
\end_layout

\begin_layout Plain Layout

    explore the maze further
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the pseudo code above, decisions such as 
\begin_inset Quotes eld
\end_inset


\family typewriter
explore the maze further
\family default

\begin_inset Quotes erd
\end_inset

 are 
\emph on
goals
\emph default
 the agent sets for itself.
 When it needs to get to a specific location, it finds a path to that location
 using the 
\family typewriter
A*
\family default
 algorithm, and then follows it each turn until it reaches a goal or finds
 something better to do.
\end_layout

\end_body
\end_document
