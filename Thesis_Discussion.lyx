#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this section we will discuss the major considerations we faced during
 the project, as well as the choices we took in accomplishing our goals,
 and how we could have otherwise reached them.
\end_layout

\begin_layout Section
Generality of the engine
\begin_inset CommandInset label
LatexCommand label
name "sec:DiscussionGenerality"

\end_inset


\end_layout

\begin_layout Standard
One of the major goals of this project was to make the engine as general
 as possible.
 This includes the ability for the designer to implement any kind of environment
, displayed any way he wants, and controlled by whatever APL he would like
 to use.
 In this section we will discuss how these three vital parts of our engine
 lives up to this goal.
\end_layout

\begin_layout Standard
For the engine to be general means it has the ability to adapt to any needed
 situation.
 The only restriction is that these situations are based on a Multi agent
 Environment, other than that nearly any situation should be coverable by
 the engine.
 For instance if one wishes to use the engine to make a computer game, then
 the view must be able to support a graphical display and the world of the
 engine must have the ability to be changed to a 3d-world.
 But if instead one wishes to make an engine for searching documents for
 spelling errors, then the world should be extendable to a text-document.
 Furthermore to be general also means that the engine should be used to
 work with any other APL, so regardless if the APL is goal, Jason or F#
 the engine should have the ability to be adapted into working with either
 of those languages.
\end_layout

\begin_layout Standard
In many cases, the shortest path to a general system is removing restrictions.
 Unfortunately, features are often restrictive in nature; the most general
 system of all is one that is completely featureless.
 Thus, it is often a trade-off between features and generality.
 In our engine design idea we try to overcome this by making all features
 as extensions or optional thus not restricting the core engine.
\end_layout

\begin_layout Subsection*
Model
\end_layout

\begin_layout Standard
For the model to be general, it should be capable of representing a world
 as any possible data structure.
 Additionally, the objects inhabiting it should be as general as possible,
 allowing them to be defined in a way that makes sense in the context of
 the world.
 
\end_layout

\begin_layout Standard
We have accomplished this by imposing as few restrictions as possible on
 these objects.
 For example, as described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SystemFeaturesVirtualWorld"

\end_inset

, a world in the engine has no data associated with it by default, leaving
 the modelling of it completely in the hands of the designer.
 The only restriction on the world is the idea that all entities should
 have a postition in it, although the position object is completely general
 itself.
\end_layout

\begin_layout Standard
Initially, we toyed with the idea of equipping the world with a graph as
 the default representation of the environment, since it is a very general
 data structure in the sense that it can be used to describe other data
 structures.
 The problem with this approach is that a graph may not be the best representati
on of any given world.
 In the case of a tile based world, for example, a two dimensional array
 is more feasible, since this is its natural representation.
 Ultimately, we chose to impose no restrictions on the data structure used,
 and instead rely on the use of extensions to model environments.
\end_layout

\begin_layout Subsection*
Interfacing with APLs
\end_layout

\begin_layout Standard
One of the major problems in designing an interface that works with different
 APLs is that: the order in which they, queue actions and queries percepts
 may be different from APL to APL.
 In effect, they do not share a common execution protocol.
 This means that we cannot provide a general method for communicating with
 any AP.
 Instead, as with other parts of the engine, the intent is to allow for
 extensions capaple of interfacing with different APLs in any way they see
 fit.
\end_layout

\begin_layout Standard
It could be argued that using the notions of percepts and actions serves
 to limit the universality of the engine.
 These are, however, general concepts for interacting with an intelligent
 agent.
 They are basically the input and output of the agent; it perceives the
 state of the world, and produces an action based on this information.
 As such, they are essential to interacting with an agent, and incorporated
 in all agent programming languages we are aware of.
\end_layout

\begin_layout Subsection*
View
\end_layout

\begin_layout Standard
For the view to be considered general it is paramount that the design of
 the view is not being restricted in anyway, this is done by keeping anything
 in the view very minimalistic.
 By minimalistic we mean that the view only provides about four classes
 and they only provide a tiny portion of business logic.
 If we had narrowed down how exactly a view should be designed such as requiring
 a frame for which the view is projected on.
 This might have made implementations of the view easier as tools to draw
 on frames could be pre-implemented into the engine, but in turn restricted
 the view from being able to become other types of view.
 We did not want to do this since we think that restrictions should be non-exist
ent .However this also poses a potential problem in that it is so minimalistic
 that we barely provide anything for the user, and leave the user to the
 task of making the view by themself.
\end_layout

\begin_layout Subsection*
Solving the Problems of Generality
\end_layout

\begin_layout Standard
As evident when discussing how to make the engine general and how to make
 it work with as many situations as possible, the problem arises that the
 workload for the user gets increased.
 This is because whenever we remove something from the engine in order to
 ensure that we impose no restrictions.
 We run the risk of removing something that made the life of the user easier,
 as they would not have to re-implement it themself.
 To combat this problem we moved everything that added value to the engine
 but imposed a restriction to the Engine Extensions project.
 The idea would be that while the extensions was not part of the core engine,
 they would be part of what we delivered with the engine.
 We saw this as the best of both worlds, not only do we ensure that the
 engine is not being restricted, but at the same time if the user did not
 mind some restrictions, then they would be able to find a suitable extension
 among the ones we provide.
 As of now the only extensions we have are those needed for the reference
 implementation, but our long term plan would be to add more extensions
 if possible.
\end_layout

\begin_layout Section
Model View Controller Design Pattern
\end_layout

\begin_layout Standard
The model view controller design pattern is one of the older design patterns
 within software design; its purpose is to ensure that the developer does
 not deal with multiple issues at once, and instead is able to focus on
 one task of the project at a time.
 We chose to base our engine on the MVC pattern because we also do not want
 the user of the engine to be tasked with multiple issues at once.
 Without the MVC pattern, the user could be confused about how for instance
 they should design a controller for an APL, and perhaps they would mistakenly
 design it tailored to specific actions.
 If the user did this, they would have to write new actions to perform the
 same task for each new APL they encountered, which would increase code
 redundancy.
 As the developers of this engine we wanted to ensure those kinds of mistakes
 do not happen.
 The way we enforce this is by forcing the MVC pattern.
 Since by forcing the MVC pattern we force the user to think about how they
 should construct the implementation of the engineâ€™s abstract classes.
 However since it is only a pattern, the user can still make bad design
 decisions as we impose no restrictions.
 
\end_layout

\begin_layout Section
Choice of Technologies
\end_layout

\begin_layout Subsection*
The XMAS Engine
\end_layout

\begin_layout Standard
We have chosen to implement the engine in C#, which runs on the .NET platform.
 While Java has a strong presence in multi-agent system development -- as
 it is used by established APLs such as Jason, as well as the EIS standard
 -- we have a subjective preference for C#.
 In general, C# is a newer and more modern programming language with better
 facilities for writing comprehensive and maintainable code, and provides
 some features usually only found in functional programming languages.
 Additionally, .NET code can be executed across platforms, thanks to the
 Mono project
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
http://www.mono-project.com
\end_layout

\end_inset

, although the newest version of .NET (v4.5) has not been ported at the time
 of this writing.
 Although developing our reference implementation would have been simpler
 had we used Java, opting out of this in favor of C# gave us the opportunity
 to test how well our engine interfaced with programs not written in the
 same language.
 
\end_layout

\begin_layout Subsection*
Reference Implementation
\end_layout

\begin_layout Standard
As our reference implementation was developed to showcase and test our engine,
 we aimed to implement it using the most commonly used agent programming
 language.
 Since EIS can be interfaced with many different APLs, this seemed like
 the obvious choice.
 If the engine could be shown to work with EIS, any APL supported by EIS
 would work by extension.
 Initially, we considered writing a J# (.NET bindings for the Java Language)
 module, which would work natively with both our engine written in C#, and
 the EIS implementation written in Java.
 However, we felt that this would remove the difficulties of communicating
 with an entirely different platform.
 This difficulty is important to face, since 
\end_layout

\begin_layout Section
Comparison to other Environment Construction Tools
\begin_inset CommandInset label
LatexCommand label
name "sec:DiscussionComparison"

\end_inset


\end_layout

\begin_layout Standard
In this section, we will compare the XMAS engine to other frameworks that
 can be used to construct and manage MAS environments.
 In particular, we will consider CArtAgO
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
http://cartago.sourceforge.net/
\end_layout

\end_inset

 (
\emph on
C
\emph default
ommon 
\begin_inset Quotes eld
\end_inset


\emph on
Art
\emph default
ifacts for 
\emph on
Ag
\emph default
ents
\begin_inset Quotes erd
\end_inset

 
\emph on
O
\emph default
pen framework, henceforth referred to as Cartago), which have been used
 in several projects, and as a part of the 
\emph on
JaCaMo
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
http://jacamo.sourceforge.net/
\end_layout

\end_inset


\emph default
 (
\emph on
Ja
\emph default
son, 
\emph on
Ca
\emph default
rtago, 
\emph on
Mo
\emph default
ise) project, which provides a complete framework for multi-agent systems
 consisting of the Jason MAPL (multi-agent programming language), the Cartago
 environment constructions API, and the Moise organizational system.
 We will also compare our engine to using plain EIS.
\end_layout

\begin_layout Subsection
Cartago
\end_layout

\begin_layout Subsubsection*
Agents and Artifacts
\end_layout

\begin_layout Standard
The Cartago framework uses the 
\family typewriter
A&A
\family default
 (Agents and Artifacts) approach to designing environments.
 In the following, we will provide an overview of this model, which is presented
 in 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cite{Ricci08}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In the A&A meta-model, a collection of computational entities called 
\emph on
artifacts
\emph default
 constitutes the environment.
 They are computational entities in the sense that they are meant to provide
 functionality exploitable by the agents, and can have a state and business
 logic, but are not meant to act autonomously.
 In fact, instead of agents having predefined actions that manipulates the
 state of the world when executed, they are aware of a collection of artifacts,
 which each provide a number of operations the agents can perform on them.
 The artifacts also provides percepts to the agents, and are as such the
 agents' means of interacting with the world.
 
\end_layout

\begin_layout Standard
Artifacts can not only be used to model objects with a physical presence
 in the world (such as analogues to the packages and dropzones in our reference
 implementation), but also more abstract concepts, such as control flow
 objects.
 For example, a communication artifact could be created, through which several
 agents could talk and listen, through operations and percepts, respectively.
 Since agents can create and destroy artifacts at will, such communication
 channels are easy to spawn in an ad hoc manner.
\end_layout

\begin_layout Standard
The A&A meta-model, as described in 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cite{Ricci08}
\end_layout

\end_inset

, is to some extent based on the way humans interact in a working environments,
 as it draws on research in fields such as organisational sciences and anthropol
ogy.
 This lead to the introduction of artifacts as tools, service providers
 and communication devices, since they better describe such an environment.
 In general, the A&A approach focuses on incorporating these concepts as
 an integral part of the environment, so as to make it a functional and
 reactive part of a multi-agent system.
 This is in contrast to classical MAS engineering, where the environment
 is typically defined as a more static structure can act in and retreive
 percepts from.
\end_layout

\begin_layout Subsubsection*
Cartago Implementation
\end_layout

\begin_layout Standard
The Cartago framework is implemented in Java and can natively connect to
 the Jason APL.
 Here, we will explain how Cartago implements the A&A meta-model.
 A more thorough explanation can be found in 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cite{Ricci11}
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
Agents In Cartago, agent programs are connected to agent bodies, which are
 -- in that respect -- conceptually similar to agents in the XMAS engine,
 as they represent a vessel for the agent in the environment, but no agent
 logic.
 In keeping with the A&A approach explained above, the agent API allows
 for creating and deleting artifacts, as well as executing operations on
 artifacts and retreiving percepts from them.
 
\end_layout

\begin_layout Description
Sensing For handling perception, Cartago provides the concept of 
\emph on
sensors
\emph default
.
 An agent contains a set of sensors, each collecting percepts from an artifact.
 The 
\family typewriter
sense
\family default
 method of an agent takes a sensor as input and returns a percept gathered
 by it, whereafter the percept is removed from the sensor.
 The sensors can be overridden by the designer to -- for example -- control
 in what order it should return its contained percepts.
 A sensor is connected to an artifact via the 
\family typewriter
focus
\family default
 method.
 Sensory inputs can be filtered, so that a sensor only picks up percepts
 matching a user-defined pattern.
\end_layout

\begin_layout Description
Artifacts Artifacts specify operations that agents can execute as described
 by the A&A meta-model.
 Artifacts can generate events, which can be gathered by any connected agent
 sensors.
 Artifacts can describe how they are meant to be used, ie.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
 
\end_layout

\end_inset

what operations thay have and how they should be called.
 When an agent executes an operation on an artifact, a boolean value is
 immediately returned, signifying either success or failure.
 The calling agent can give a sensor as an argument to the method invocation,
 which will gather any percepts that the artifact generates as a result
 of executing the operation.
\end_layout

\begin_layout Subsubsection*
Agents and Artifacts in XMAS
\end_layout

\begin_layout Standard
The main purpose of the Cartago project is to provide a framework for designing
 MASs using the A&A meta-model.
 While that have not been the goal of the XMAS engine, it is general enough
 to support this approach, especially since the engine allows entities to
 incorporate state and business logic through entity modules.
 Below, we have described how artifacts, agents and perception would be
 implemented using the engine:
\end_layout

\begin_layout Description
Agents would be XMAS agents, with a module for creating, destroying and
 containing (references to) artifacts, as well as a module for each sensor.
 The 
\family typewriter
sense
\family default
 action used in the Cartago API is not entirely equivalent to our generic
 
\family typewriter
getAllPercepts
\family default
 action, as it only retrieves one percept from one specific sensor, but
 such an action could easily be implemented.
 
\end_layout

\begin_layout Description
Artifacts would be represented as entities with a module for each operation
 the artifact provides.
 When new stimuli, ie.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
 
\end_layout

\end_inset

new percepts, would be available, an XMAS event would be raised.
\end_layout

\begin_layout Description
Sensing The agents' sensor modules would be connected to the artifact entities
 by registering triggers on them, wchich would subscribe to the events raised
 by the artifacts.
 By using trigger conditions (cf.
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SystenFeaturesEventAndTriggers"

\end_inset

), the percepts could be filtered as with Cartago sensors.
 The modules in XMAS already provides means for being queried for collections
 of percepts, so this functionality could be used to let them return all
 the percepts that have become available to them since the last invocation.
 Alternatively, they could incorporate some logic for the ordering of returned
 percepts, in case the user only wants one percept per 
\family typewriter
sense
\family default
.
\end_layout

\begin_layout Standard
The functionality described above could be encapsulated in an engine extension,
 providing the proper modules, events and actions.
 One issue with this is that entities in the XMAS engine are meant to have
 a position.
 As mentioned, this is not a strict requirement, as the position can be
 set to a null value and ignored.
 Additionally, recent versions of Cartago supports what they call workspaces,
 which serves to group the agents and artifacts together in different sub-enviro
nments, for which positions in the XMAS engine would be well suited.
\end_layout

\begin_layout Subsection
Environment Interface Standard
\end_layout

\begin_layout Standard
While Cartago provides a very specific approach to designing an environment,
 EIS is at the completely opposite side of the spectrum.
 The only thing EIS provides is an interface between a single APL and Java,
 this means that its goals are different from ours.
 What EIS is good at, is providing a way to comunicate with a language that
 otherwise had no way of doing so.
 While the goal of our engine is simply to use APLs that are capable of
 comunication (some of them being so through EIS).
\end_layout

\begin_layout Standard
As such, comparing our engine to EIS would be a mistake since they are different
 at the core, meaning that EIS is much better at what it is designed for,
 while our engine is much better at what we designed it for.
\end_layout

\end_body
\end_document
