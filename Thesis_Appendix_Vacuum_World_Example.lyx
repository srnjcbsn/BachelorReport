#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{listings}
\usepackage{color}
\usepackage{alltt}

\definecolor{mygreen}{rgb}{0,0.4,0}
\definecolor{mygray}{rgb}{0.4,0.4,0.4}

\lstset{
    basicstyle={\ttfamily\small}
  , breaklines=true
  , commentstyle={\color{mygreen}}
  , keywordstyle={\color{blue}}
  , language={[Sharp]C}
  , numbers=left
  , stringstyle={\color{mygray}}
  , tabsize=4
  , showstringspaces=false
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
To properly understand the engine it is often needed to have good examples
 of how to use the engine, as such this part will cover how to make the
 Vacuum Cleaner World that is a basic Agent based world.
\end_layout

\begin_layout Standard
Basically the idea is that the world consists for two tiles, which for the
 purpose of this example we will call them Tile 0 and Tile 1.
 The agent is a vacuum cleaner and has the ability to move from one tile
 to another, furthermore the agent can sense if there is dirt on its current
 tile.
 The agent also has the ability to suck if it sucks on a tile with dirt
 then the dirt is removed.
 The job of the agent is thus to remove all dirt from both of the tiles,
 in a more advanced version the tiles gets dirt after an uncertain amount
 of time, however in this example the dirt is only there from the beginning
 of the world creation.
\end_layout

\begin_layout Standard
The full code for this example can also be found in the 
\family typewriter
VacuumCleanerWorldExample
\family default
 project as part of our source code.
\end_layout

\begin_layout Section
World
\end_layout

\begin_layout Standard
We start by creating the world for the Vacuum Cleaner world, however before
 we do this we must first define what a position in the world is and what
 information is need to add an agent.
\end_layout

\begin_layout Standard
Position in the vacuum world:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumPosition.cs"

\end_inset


\end_layout

\begin_layout Standard
Information need to add an agent to the vacuum world:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumSpawnLocation.cs"

\end_inset


\end_layout

\begin_layout Standard
Now we construct the world:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumWorld.cs"

\end_inset


\end_layout

\begin_layout Standard
Finally we create the factory that is meant to build the world on command
 from the engine:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumWorldBuilder.cs"

\end_inset


\end_layout

\begin_layout Section
The Entities And Agents
\end_layout

\begin_layout Standard
The job of the agent in vacuum world is suck up dirt as such we must add
 a dirt entity:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/DirtEntity.cs"

\end_inset


\end_layout

\begin_layout Standard
Before we can add the Vacuum cleaner we must first create the modules it
 uses, in our case it only needs a module to see the dirt on its current
 location.
\end_layout

\begin_layout Standard
However before that we need to make a percept for the agent, this percept
 we will call VacuumVision and it will show the vacuum’s current position
 and if the tile it is on is dirty.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Percepts/VacuumVision.cs"

\end_inset


\end_layout

\begin_layout Standard
Now we can add the module
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Modules/VacuumVisionModule.cs"

\end_inset


\end_layout

\begin_layout Standard
And at last we can finally add the Vacuum Agent:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumCleanerAgent.cs"

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Actions and Events
\end_layout

\begin_layout Standard
The vacuum cleaner can perform two actions which are to suck and to move.
 We would also like that an event gets raised when either action is done.
\end_layout

\begin_layout Standard
Thus we must first define both events
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Events/VacuumMovedEvent.cs"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Events/VacuumSuckedEvent.cs"

\end_inset


\end_layout

\begin_layout Standard
Now that the events has been defined it is time to make the actions.
\end_layout

\begin_layout Standard
We start by creating the move action, to prevent the agent from being too
 fast we slow it down by putting a delay on its move action.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Actions/MoveVacuumCleanerAction.cs"

\end_inset


\end_layout

\begin_layout Standard
Next, we create the suck action:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Actions/SuckAction.cs"

\end_inset


\end_layout

\begin_layout Section
Controller
\end_layout

\begin_layout Standard
In order for the agent to be able to react to its environment we must provide
 it with an controllers, in this example we will use C# as the agent language.
\end_layout

\begin_layout Standard
First we start by making the controller, the controller contains logic on
 how the agent should behave, in this example we make the agent suck if
 there is dirt otherwise it will simply move and look for dirt elsewhere.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumAgentController.cs"

\end_inset


\end_layout

\begin_layout Standard
Second we make an 
\family typewriter
AgentManager
\family default
 class this class’s object will be responsible for constructing a controller
 for the agent as such it must be provided with the name of the agent so
 it can be located in the world:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumAgentManager.cs"

\end_inset


\end_layout

\begin_layout Section
View
\end_layout

\begin_layout Standard
All other parts are now done and it is time to make a visualization of the
 world and the agent, to keep the example as simple as possible we will
 use an extension meant for making loggers and use a log as our view.
 This way we can track all actions taken by the vacuum agent.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumWorldView.cs"

\end_inset


\end_layout

\begin_layout Section
Designing the map and wiring the parts together
\end_layout

\begin_layout Standard
Before the engine can be started its needed to design a map for the engine,
 there are multiple options how the world looks we have chosen the one where
 the agent is on Tile 0 and there is only dirt on Tile 1.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/VacuumMap1.cs"

\end_inset


\end_layout

\begin_layout Standard
When the map has been designed the only part left of the engine is to wire
 all its components together, this is done in the C# programs main method:
\end_layout

\begin_layout Description
Notice! that the log is written to file called viewlog.log
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "VacuumSource/Program.cs"

\end_inset


\end_layout

\begin_layout Section
Testing the Vacuum World
\end_layout

\begin_layout Standard
Opening the 
\family typewriter
viewlog.log
\family default
 we can see how the agent has progressed:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout

Vacuum moved from: Tile(0), to: Tile(1) 
\end_layout

\begin_layout Plain Layout

Vacuum sucked 
\end_layout

\begin_layout Plain Layout

Vacuum moved from: Tile(1), to: Tile(0) 
\end_layout

\begin_layout Plain Layout

Vacuum moved from: Tile(0), to: Tile(1)
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see that the agent moved to Tile 1 and sucked up the dirt, after
 which it went back and forth to locate more dirt.
\end_layout

\end_body
\end_document
