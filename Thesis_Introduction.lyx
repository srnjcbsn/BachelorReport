#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Background
\end_layout

\begin_layout Standard
MASs (multi-agent systems) is an important research topic in the field of
 AI (artificial intelligence) as they consist of several intelligent agents
 interacting and cooperating to reach some goal.
 This lends itself well to distributed computing, following the recent (since
 the turn of the millenium) trend of designing processors with more cores
 rather than better ones.
 Multi-Agent Systems have also been used to simulate naturally occurring
 systems, where several autonomous agents interact.
 
\end_layout

\begin_layout Standard
There have been a lot of research on the topic of MASs, as well as related
 ones such as distributed artificial intelligence (DAI).
 There are several APLs (Agent Programming Languages) tailored to MAS developmen
t; they are called MASPLs (Multi-Agent System Programming Languages).
 To provide a setting for these APs (Agent Programs), we have the general
 notion of an 
\emph on
environment
\emph default
 in which they can interact.
 
\end_layout

\begin_layout Section*
Motivation
\end_layout

\begin_layout Standard
While there exists many multi-agent programming languages, there are few
 tools for constructing environments for the agents to behave in which allows
 for easy graphical representation.
 
\end_layout

\begin_layout Standard
There are many complications when developing multi agent systems, our goal
 with this project was to lessen one of these by designing an engine with
 the specific purpose to develop multi agent environments.
 What these environments can be is left to the developer, however almost
 everything in the engine is modular and interchangeable, ensuring that
 all types of multi agent environments are possible.
 
\end_layout

\begin_layout Standard
What the types of projects can be is manyfold but here are some possible
 examples:
\end_layout

\begin_layout Paragraph*
Agent comparison software
\end_layout

\begin_layout Standard
There are many different languages in which it is possible to write agent
 programs, some are specifically designed for it others are powerful enough
 to accommodate the possibility of agent programming.
 Our engine is designed with support for multiple languages at once which
 makes this engine a perfect candidate for designing a comparator program.
 
\end_layout

\begin_layout Standard
For instance, if two groups wanted to test their agent programs against
 each other, this engine would make it possible for them to easily design
 a world in which this test could occur.
\end_layout

\begin_layout Paragraph*
Agent testing/Simulation software
\end_layout

\begin_layout Standard
Testing agent software can be complicated.
 Being able to rapidly create an environment and visualize it can be important
 to the project, as it ensure basic mistakes are ironed out before larger
 scale implementation.
 
\end_layout

\begin_layout Paragraph*
Agent teaching tools
\end_layout

\begin_layout Standard
Teaching agent languages can be tough without proper exercises; however,
 the time spent on designing these exercises can prove too exhausting for
 the teacher to develop.
 In this case the teacher can rapidly design the world he had in mind for
 his exercise instead of designing every integral part of the multi agent
 system himself.
 This is because our engine provides all the basic features of a multi agent
 system, so that the time can be spent more productively on designing how
 a given exercise should play out, showcasing the problem the students are
 supposed to deal with.
\end_layout

\begin_layout Paragraph*
Computer games
\end_layout

\begin_layout Standard
In theory most computer games are just multi agent programs where one of
 the agents is controlled by the player.
 Our engine should make it fairly easy for setting up a framework for creating
 rules inside a given world and ensure that the agents of the world follow
 said rules.
 
\family typewriter
\emph on
[Expand]
\end_layout

\begin_layout Section*
Goals
\end_layout

\begin_layout Description
Generality: By this, we mean that components developed with our engine should
 be 
\emph on
reusable
\emph default
 in the sense that they should be able to be used in other projects.
 For examle, the logic for connecting to a specific APL should be implamentable
 in other projects.
 Furthermore, the engine itself should be multi- applicable; it should be
 able to be used to construct any kind of scenario, and interface with different
 APLs.
\end_layout

\begin_layout Description
Easy
\begin_inset space ~
\end_inset

to
\begin_inset space ~
\end_inset

use: It should be relatively easy to construct a complicated scenario, and
 even easier to construct a simple one.
\end_layout

\begin_layout Description
Cross
\begin_inset space ~
\end_inset

platform
\begin_inset space ~
\end_inset

compatibilty: The engine should be executable on as many platforms as possible,
 at least the three major operating systems (Linux, Mac and Windows).
\end_layout

\begin_layout Section*
Overview of the Report
\end_layout

\begin_layout Standard
In this report we will document our efforts to design an engine as described
 above.
 The report is structured as follows: 
\end_layout

\begin_layout Description
Theory outlining the design patterns used in the engine along with explanation
 of MAS.
\end_layout

\begin_layout Description
Reference
\begin_inset space ~
\end_inset

Implementation providing an introduction to how a final product of the engine
 might look, along with agent programs connected to the engine.
\end_layout

\begin_layout Description
System
\begin_inset space ~
\end_inset

Features describing the features of the engine and how it can be used.
\end_layout

\begin_layout Description
Implementation containing an examination of the actual implementation of
 the engine, along with our considerations of the choices taken.
\end_layout

\begin_layout Description
Testing describes how the engine was tested.
\end_layout

\begin_layout Description
Results
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

Comparisons evaluates whether the goals we had set for the engine was reached,
 and compares it to similar works.
\end_layout

\end_body
\end_document
