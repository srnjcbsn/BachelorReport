#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Model View Controller
\end_layout

\begin_layout Standard
To ensure that code is correctly decoupled from one another, strict design
 patterns are necessary, as these allow developing complex projects without
 losing the sight of the entire project.
 If no pattern is followed, code can easily become so entangled that later
 development might prove impossible.
 This section will cover all the rules and ideas behind the MVC (Model-View-Cont
roller) design pattern.
\end_layout

\begin_layout Standard
The MVC pattern principle is that programs that can be interacted with by
 a user can be split into three different components.
 These components are as follows:
\end_layout

\begin_layout Itemize
Model -- Core of the program
\end_layout

\begin_layout Itemize
View -- Visualization of the program
\end_layout

\begin_layout Itemize
Controller -- Manager of state changes to the core of the program
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MVC.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:MVCBasic"

\end_inset

This image shows how the three components are connected to each other; the
 full arrows indicate that a component has complete knowledge of the component
 it is pointing to.
 A dashed arrow indicates that the component the dashed arrow is pointing
 to is listening to the component the arrow is originating from.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Model
\end_layout

\begin_layout Standard
The model is the core of the program.
 It is why the program functions as it does, it contains all information
 of the data, and it is here all business logic is located.
 The model should have no knowledge of either the view or the controller;
 by not knowing either the program is ensured to not be tainted by their
 influence.
\end_layout

\begin_layout Standard
While it may not know of the view or the controller, it is paramount that
 the model is built to optimally transfer information concerning its current
 state.
 That means that providing a way for other components to listen on the model
 is very welcome
\emph on
.
 
\emph default
This gives the model a way to publish its state when it has been altered
\emph on
.

\emph default
 What this does for the model is that in the case that model state has been
 altered, it will have a way to provide the information of the state.
 
\end_layout

\begin_layout Standard
If such features are not built into the model then it would require the
 component changing the state to inform of the state changes, in case of
 a MVC design.
 The component changing state is the controller and such the controller
 would both have the duty of changing the state and maintaining the view.
 This is generally the case of a badly designed model and can be completely
 avoided if the model simply has the ability to inform its listeners of
 any changes.
\end_layout

\begin_layout Subsection
View
\end_layout

\begin_layout Standard
The view is a way to visualize what is currently occurring inside model
 by visualizing it to the user.
 A view may take many shapes depending on the model.
 If, for instance, the model is a program crunching data on a server, then
 the view could take the form of a logging console.
 Or if the model was a computer game then the view would be the graphic
 representation of the game.
 Additionally, a model can have severl views, each displaying information
 in a different manner.
 For example, the computer game mentioned above could also feature a view
 printing debugging information to a console while the game was running.
 Generally, a view should only have knowledge of the model and not the controlle
r.
 The idea is that if the model data is complete then interaction with the
 controller should not be necessary.
\end_layout

\begin_layout Standard
When designing a view there are some common pitfalls that happen easily
 if one is not careful of the design.
 First off, the view is what it is named; a view.
 This means that it should never do any state changes to the model.
 If getting hold of data means that the model must change its state to accommoda
te this, then the model is poorly made and should be changed.
 However, a view is allowed to change its own state without involving either
 the controller or model.
 To fully understand what is meant by this, consider the following example:
\end_layout

\begin_layout Standard
Assume you have a menu bar as depicted in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:menubar"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MenuBar.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:menubar"

\end_inset

A standard menu bar.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To open a menu, the user need to drag the mouse and click on one menu he
 or she wishes to open.
 Many would see this as a task of the controller.
 This is not the case, however, since the changes done are only performed
 on the view's own state and not the model of the program.
\end_layout

\begin_layout Subsection
Controller
\end_layout

\begin_layout Standard
The controller is the link between the model and the user.
 By convention, all changes the user wishes to perform on the model should
 be done through the controller.
 Like the view, it can take many shapes, like an object that transforms
 input from the mouse into changes to the model, or an object controlling
 how a network data stream effects on the model.
 
\end_layout

\begin_layout Standard
In a well-designed program the controller should never have to interact
 with the view.
 However, this can be practically impossible on larger projects unless they
 are carefully planned, and as such the controller by convention is allowed
 to know of both the view and the model.
\end_layout

\begin_layout Standard
A common mistake when designing the controller is to mistake the unit which
 the controller gets input from as the actual controller.
 In many cases, the keyboard is the device from which input is transformed
 into state changes to the model.
 However, that does not mean that the controller should be the only unit
 interacting with the keyboard.
 Going back to the example used to understand the view, the reason why the
 controller should not deal with opening a menu bar on the view is because
 the controller is not responsible of the state of the view.
 The controller is only responsible for the state of the model; the only
 case in which it is allowed for the controller to interfere with the view
 is in the case that the model was unsuccessful in properly informing about
 its state change caused by the controller.
 In this case it is okay for the controller to call the view and ask it
 to adjust itself.
 
\end_layout

\begin_layout Standard
The reasoning for why the controller is normally mistaken to be responsible
 for handling changes to the state of the view is because it is mistakenly
 thought of as a controller for the entire program and not the model, a
 view may contain its own controller which should not be mistaken from the
 other controller.
 To fully understand this, imagine that the view in itself also contains
 a MVC inside itself (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MVCeption"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MVCeption.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:MVCeption"

\end_inset

A view with a MVC inside of it.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The model of a view (such as a menu bar) would contain data about the names
 of the menus and it would be responsible for ordering and accessing information
 as to what each menu contains.
 Its view would be that of a drawing board responsible for properly drawing
 the menu bars.
 Luckily, most views are simple, so one does not need to make an entire
 MVC design, but for graphical user interface used in most operating system
 it is very important to understand that a view can be an entire MVC setup
 in itself.
 This is why most operating system comes with libraries to easily design
 GUI.
\end_layout

\end_body
\end_document
