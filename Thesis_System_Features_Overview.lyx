#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
Before we begin explaining all the features of the engine, we would like
 to point out that if it is necessary for the reader to see an actual implementa
tion using all the feature, there is one available in appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:VacuumWorldAppendix"

\end_inset

 (Vacuum World).
\end_layout

\begin_layout Standard
The goal of the engine is to allow for simulation of a world where agents
 within are allowed to act.
 As such, it is important that it can accurately model a state-machine.
 To model a state-machine, one must have the ability to contain a state
 and perform actions to change the current state.
 
\end_layout

\begin_layout Standard
A complete UML Domain model diagram is provided in appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Domain-Model-UML"

\end_inset

.
\end_layout

\begin_layout Subsection
State
\end_layout

\begin_layout Standard
In our domain model, we have state stored in three object types:
\end_layout

\begin_layout Itemize
World
\end_layout

\begin_layout Itemize
Entities
\end_layout

\begin_layout Itemize
Modules
\end_layout

\begin_layout Paragraph*
World
\end_layout

\begin_layout Standard
The world is the place all entities are meant to inhabit as either agents
 of the world or simply objects for other entities to interact with.
 The world is not defined by the engine.
 As shown in appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DomainModelDiagramXMAS"

\end_inset

, it is an abstract class, meaning it is the developer using our engine
 that defines the world.
 As such the world can be any type of world needed, it could be a 3-d world,
 a 2-d world, a world based on tiles or hexagons, or simply be nodes with
 an undefined number of edges connecting each other.
\end_layout

\begin_layout Paragraph*
Entities
\end_layout

\begin_layout Standard
The world is empty without anything inside it, as such we have the entities
 which are meant to model the objects one would have the world contain.
 For example, in our reference implementation, we have a world with packages
 scattered about a maze.
 It is then the task of the agents to collect these packages; the entities
 here are not only the walls of the maze and the packages, but also the
 agents since they inhabit the world as well.
 The agents are different from entities in that they all have a name.
 This name is unique and is meant to be a way of distinguishing the agents
 from one another.
 
\end_layout

\begin_layout Paragraph*
Modules
\end_layout

\begin_layout Standard
The modules can be viewed as either the constraints or as the abilities
 of all entities.
 For example, if you wanted to constrain entities from moving into each
 other, you would create a 
\emph on
movement blocking module
\emph default
, which would contain information on whether or not a given entities is
 allowed to pass through it.
 However, if you wanted to give an agent the ability to move, a 
\emph on
speed module
\emph default
 would be required.
 Whether a certain module is a constraint or an ability is up to the individual
 module.
\end_layout

\begin_layout Subsection
Actions
\end_layout

\begin_layout Standard
A world is static and unexciting if one is not allowed to perform any changes
 to it, for this we provide what we have chosen to name actions.
 There are two different types of actions: environment actions and entity
 actions.
 The core difference between them is that entity actions are meant as actions
 performed by a single entity, such as moving the entity or having the entity
 pick up another object.
 Environment actions are actions that affect the entire world.
 In our domain model, we have chosen to add two actions that are built into
 the engine, the first is an entity action that gets all the percepts for
 a given entity called 
\family typewriter
GetallPerceptsAction
\family default
 and the other is an environment action that can shut down the engine called
 
\family typewriter
CloseEngineAction
\family default
.
 
\end_layout

\begin_layout Subsection
Events and Triggers
\end_layout

\begin_layout Standard
The engine relies heavily upon events, this means that all actions performed
 within the engine is meant to trigger events in response.
 This can be used to either activate new actions within the engine, or be
 meant to transfer data to the views listening.
 
\end_layout

\begin_layout Standard
In order to listen to the events, a trigger need to be created with all
 the events it listens to registered to it.
 Furthermore, a trigger needs a condition and an action.
 The condition is a predicate that determines whether the trigger is fired,
 and the action is the function that is excuted when the trigger is fired.
\end_layout

\end_body
\end_document
