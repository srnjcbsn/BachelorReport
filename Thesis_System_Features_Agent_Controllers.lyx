#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Agent Controllers
\begin_inset CommandInset label
LatexCommand label
name "sec:SystemFeaturesAgentControllers"

\end_inset


\end_layout

\begin_layout Standard
The purpose of the agent controllers is to be able to control agents in
 the engine from outside.
 This section will cover our setup of an agent controller.
 
\end_layout

\begin_layout Standard
To get an overview of the classes used for the 
\family typewriter
AgentController
\family default
, look at fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:AgentControllerDomainModel"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename AgentControllerDomainUML.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Domain model for Agent Controller
\begin_inset CommandInset label
LatexCommand label
name "fig:AgentControllerDomainModel"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Concept
\end_layout

\begin_layout Standard
The engine is designed to support the ability to be adapted for all APL
 types, this means that the engine itself does not support all APLs but
 instead provides a framework for quickly designing interfaces between the
 engine and any APL.
 There are two classes that one must use in order to properly design the
 interface:
\end_layout

\begin_layout Description
The
\begin_inset space ~
\end_inset


\family typewriter
AgentManager
\family default
 has the duty of speaking directly with the agent language it attempts to
 interface with.
 Its job is to spawn an 
\family typewriter
AgentController
\family default
 for each agent the AP wishes to take control of.
 The 
\family typewriter
AgentManager
\family default
 is in that sense much akin to an Abstract Factory (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:TheoryFactoryDesignPattern"

\end_inset

) , which -- according to the design pattern -- is an abstract class with
 a method generating a certain type of object, without restricting exactly
 which object is generated, as long as it is of the specified type.
 The idea is that if you have a 
\family typewriter
GoalAgentManager
\family default
 then the controller it constructs would be 
\family typewriter
GoalAgentController
\family default
.
 The methods required by both the 
\family typewriter
AgentController
\family default
 and the 
\family typewriter
AgentManager
\family default
 are abstract.
 Thus, we ensure at compile time that the engine framework is properly used
\family typewriter
\emph on
.
\end_layout

\begin_layout Description
The
\begin_inset space ~
\end_inset


\family typewriter
AgentController
\family default
 is the link between a single agent and the AP.
 Its job is to take all commands sent to it by the connected AP, transform
 them into actions understood by the engine, and apply them to the agent
 that it controls.
\end_layout

\begin_layout Standard
To simplify the 
\family typewriter
AgentController
\family default
 design, it provides the method 
\family typewriter
PerformAction
\family default
, which makes it easy to execute actions on the agent it controls.
 When the 
\family typewriter
PerformAction
\family default
 is called, the 
\family typewriter
AgentController
\family default
 queues the action given through the method and puts the 
\family typewriter
AgentController
\family default
’s thread to sleep.
 Once the action has been executed by the engine, the 
\family typewriter
AgentController
\family default
 is woken up and returns from the 
\family typewriter
performAction
\family default
 method.
 All percepts received by the 
\family typewriter
AgentController
\family default
 during this time is stored on the 
\family typewriter
AgentController
\family default
 and can be easily accessed by the actual implemenation of the 
\family typewriter
AgentController
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename AgentManagerAndAgentControllSequenceDiagram.png
	lyxscale 10
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This sequence diagram shows the process of an AP taking control of agent
 through the 
\family typewriter
AgentManager
\family default
, and commanding it through the 
\family typewriter
AgentController
\begin_inset CommandInset label
LatexCommand label
name "fig:APConnectingToAndControllingAC"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The process of an AP taking control of an agent is illustrated in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:APConnectingToAndControllingAC"

\end_inset

.
 The AP calls the 
\family typewriter
AgentManager
\family default
 to locate the agent it wishes to assume control of.
 The agent is located through a string (its name) which is unique to it
 and ensures that only one agent is taken.
 When the 
\family typewriter
AgentManager
\family default
 finds the correct agent, it will immediately generate a new 
\family typewriter
AgentController
\family default
.
 The AP will not gain access to the agent but instead it will gain access
 to the 
\family typewriter
AgentController
\family default
.
 Now that the AP possesses the 
\family typewriter
AgentController
\family default
, it will have the ability to send the 
\family typewriter
AgentController
\family default
 commands.
 These commands might not be understood by the engine if the APL is foreign
 enough to the engine’s own language and as such it is the duty of the 
\family typewriter
AgentController
\family default
 to convert these commands into actual actions which the engine can understand.
\end_layout

\begin_layout Subsection
How to use agent controllers
\end_layout

\begin_layout Standard
To use the built-in controller features of the engine, the designer must
 provide his own implementations of 
\family typewriter
AgentController
\family default
 and
\family typewriter
 AgentManager
\family default
.
 The designer must do this for every different APL he wishes to use in the
 engine.
\end_layout

\begin_layout Standard
The classes 
\family typewriter
AgentManger
\family default
 and 
\family typewriter
AgentController
\family default
 both provides functionality as part of their own classes but also requires
 some methods that must be implemented for the classes to function.
\end_layout

\begin_layout Standard
For the 
\family typewriter
AgentManager 
\family default
the designer must provide a method that produces 
\family typewriter
AgentControllers
\family default
 of their implemention, along with locating an agent though the 
\family typewriter
AgentManager
\family default
 does provide some assistance in that regard, in the form of a agent locating
 method defined as: 
\family typewriter
TakeControlOf
\family default
, which takes the name of an agent as a string, and returns the corresponding
 
\family typewriter
Agent
\family default
.
 Furthermore, it should be noted that the 
\family typewriter
AgentManager
\family default
 is also automatically designed to create threads for the 
\family typewriter
AgentControllers
\family default
 it constructs.
\end_layout

\begin_layout Standard
For the 
\family typewriter
AgentController
\family default
, the designer must provide all logic defining how a controller handles
 a given agent, this means getting the percepts from the agent, analyzing
 the percepts and deciding an action (Could be outsourced to another APL
 such as GOAL) and then queue said action to the agent.
 The AgentController has the method 
\family typewriter
PerformAction
\family default
.
 This method can be very useful as it queues an action automatically to
 its agent, then blocks the thread until the action has been performed.
 Furthermore, this action will also trigger a C# event called 
\family typewriter
PerceptsRecieved
\family default
 in the case that the agent controller actually recieve any percepts during
 the action.
 For instance, this event could be used for where the 
\family typewriter
AgentController
\family default
, decides the next action for the agent to perform, as done in the Vacuum
 World Example in appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:VacuumWorldAppendix"

\end_inset

.
\end_layout

\begin_layout Subsection*
Summary
\end_layout

\begin_layout Standard
The agent controller is designed to be very lightweight, since we do not
 want to impose any restrictions that might limit an APL which we know nothing
 about.
 As such, the 
\family typewriter
AgentController
\family default
 is more akin to a convention or a design pattern for how interfacing with
 agents should occur.
 It provides the skeleton of how a link might be designed but does not impose
 any restriction on how the link should be set up.
\end_layout

\end_body
\end_document
