#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
When developing a large project, one of the most difficult aspects of the
 process can be proper testing.
 This section will go through what kinds of tests we performed to ensure
 that our engine works correctly.
\end_layout

\begin_layout Section
Testing the Engine
\end_layout

\begin_layout Subparagraph*
Unit Tests: 
\end_layout

\begin_layout Standard
The location of the unit tests for the engine and all its depencies can
 be found in the source code in the 
\family typewriter
XmasEngine_Test
\family default
 and 
\family typewriter
JSLibrary_Test 
\family default
projects.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Since our engine by itself is not meant to be executed, but rather is meant
 to have some of its components implemented first, the only kinds of tests
 that can be performed on the engine are unit tests.
 The unit tests that are most important to the core functionality of the
 engine are the tests concerning the 
\family typewriter
EventManager 
\family default
and the 
\family typewriter
ActionManager
\family default
, since these tests shows that the action, trigger and event functionality
 correctly works.
 However, as we created the engine using a TDD approach we should have tests
 for almost all classes with business logic contained in them.
 
\end_layout

\begin_layout Standard
One component proved impossible to properly unit test and that was the EIS
 agent controller, since this component required a connection to properly
 understand its errors.
 To perform this test we designed a simple component/functional test, this
 test is not meant to be executed as part of the unit tests.
 The test is designed to be executed with an debugger so that the programmer
 can easily follow if any errors occur during the run.
\end_layout

\begin_layout Section
Testing the Reference Implementation
\end_layout

\begin_layout Standard
The testing of our reference implementation hinges on the fact that we assume
 the engine works correctly, thus it is the job of engine-tests to ensure
 correctness and not our reference implementation.
 As the reference implementation's complicated logic was located as part
 of the extensions, which were already tested as part of testing the engine,
 the only testing that the reference implementation needed was testing of
 the GOAL program which is controlling the agent.
\end_layout

\begin_layout Standard
The goal program was tested by taking out individual parts of it such as
 its path finding, and carefully tested and debugged in the SWI-prolog program.
 When all parts worked correctly we moved them to the actual goal program
 and then made a larger scale test of the goal program using the fully running
 engine.
 Once the agent correctly had located all packages and stopped as we wanted,
 we concluded that the reference implementation was working as it should.
\end_layout

\end_body
\end_document
