init module {
	knowledge{
		% Determines if a vision M, that is a tile on the map, contains no wall types
		% findStreet(+M)
		findStreet(M) :- M = vision(X,Y, HL), Z=(X,Y), (HL = []; member(E,HL), E\=wall, E\=impassablewall).
		
		% Transposes the cordinate X, Y by the position of the agent and returns them as Nx, Ny
		%transpose( (+X, +Y), (-Nx, -Ny) )
		transpose( (X, Y), (Nx, Ny)) :- position(Px,Py), Nx is X + Px, Ny is Y + Py.
		
		% Checks if a vision contains a certain entity and transposes the vision by the agent's position
		%visionContainsAt(+Vision, ?Entity, -Tx, -Ty)
		visionContainsAt(vision(X,Y,L), Entity, Tx, Ty) :- transpose((X,Y),(Tx,Ty)), member(Entity,L).

		% Detemines if a cordinate is adjacent to another cordinate
		% adjSquare(+X,+Y, -Nx, -Ny)
		adjSquare(X,Y,Nx,Y) :- Nx is X + 1.
		adjSquare(X,Y,Nx,Y) :- Nx is X - 1.
		adjSquare(X,Y,X,Ny) :- Ny is Y + 1.
		adjSquare(X,Y,X,Ny) :- Ny is Y - 1.

		% Determines if tile on the map can be said to be explored when the vision is added to the knowledge base
		%isSquareExplored(+X,+Y,+VisibleTiles)
		isSquareExplored(X,Y,VisibleTiles):-
			setof((OX,OY),(adjSquare(X,Y,OX,OY)),OL),
			setof((NX,NY),(member((NX,NY),OL),(street(NX,NY);member((NX,NY),VisibleTiles))),OL).
	
		
		% find the streets immediateley adjacent to a given postition
		nextStreet(X,Y,Nx,Y) :- Nx is X + 1, street(Nx, Y).
		nextStreet(X,Y,Nx,Y) :- Nx is X - 1, street(Nx, Y).
		nextStreet(X,Y,X,Ny) :- Ny is Y + 1, street(X, Ny).
		nextStreet(X,Y,X,Ny) :- Ny is Y - 1, street(X, Ny).
		
		% removes a member M from a list L1 and returns the list as L2
		% delMember(+M, +L1, -L2)
		delMember(_, [], []) :- !.
		delMember(X, [X|Xs], Y) :- !, delMember(X, Xs, Y).
		delMember(X, [T|Xs], Y) :- !, delMember(X, Xs, Y2), append([T], Y2, Y).

		%Transpose Vision percept
		transposedVision(vision(X,Y,Ents),vision(TX,TY,Ents)):- transpose((X,Y),(TX,TY)).

		%Calculates the move direction vector
		calcMoveVector((TX,TY),(VX,VY)):- position(X,Y),VX is TX - X, VY is TY - Y.
		
		
		
		% ----- A* algorithm Start -----
		
		% Checks if the A* algorithm is going in circles
		isNotGoingInCircle(_,node(_,'root',_)).
		isNotGoingInCircle(Value,node((Value),_,_)):-!,fail.
		isNotGoingInCircle(Value,node(_,Parent,_)):-isNotGoingInCircle(Value,Parent).
		
		% removes the Heuritiscs information from a node
		% unWrapHeu(+HeuriticNode, -Node)
		unWrapHeu(HN,N):-HN=(_,N).
		unWrapHeu(N,N).

		% Checks if a node(that might contain heuristic data) is the lowest cost to the cordinates X, Y
		% isBestOnList(+HN,+L)
		isBestOnList(HN,L):-unWrapHeu(HN,N),N=node(street(X,Y),_,SCost), member(OtherNode,L), OtherNode = node(street(X,Y),_,OCost),SCost < OCost.
		isBestOnList(HN,L):-unWrapHeu(HN,N),\+ member(N,L).

		% Calculates the heuristics from Node1 to Node2
		% calcHeu(+Node1, +Node2, -H)
		calcHeu(node(street(X,Y),_,_),node(street(TX,TY),_,_),H):-H is sqrt((TX-X)^2+(TY-Y)^2).

		
		% Determines if a succussor to NodeCurrent should be placed on the open list
		% asSuc(+Open,+Closed,-NOpen,-NClosed,+NodeCurrent,+NodeSuccussorValue,+Goal)
		asSuc(Open,Closed,NOpen,NClosed,NodeCurrent,NodeSuccussorValue,Goal):-
			NodeCurrent = node(street(_,_),_,Cost),
			NodeSuccussorValue = street(SX,SY),
			isNotGoingInCircle(NodeSuccussorValue ,NodeCurrent),
			NodeSuccussor = node(NodeSuccussorValue,NodeCurrent,SCost),
			SCost is Cost+1,
			isBestOnList(NodeSuccussor,Open),
			isBestOnList(NodeSuccussor,Closed),
			delMember((_,node(street(SX,SY),_,_)),Open,AlmostNewOpen),
			delMember(node(street(SX,SY),_,_),Closed,NClosed),
			calcHeu(NodeSuccussor,Goal,Heu),
			HeuCost is Heu+SCost,
			NOpenNonSort = [(HeuCost,NodeSuccussor)|AlmostNewOpen],
			msort(NOpenNonSort,NOpen).
		
		% A recursive loop for going through each successor
		% asLoopSuc(+NodeCurrent,+ListOfSuccessors,+Open,+Closed,-FinalOpen,-FinalClosed,+Goal)
		asLoopSuc(_,[],O,C,O,C,_).
		asLoopSuc(NodeCurrent,[Suc|Successors],Open,Closed,FinalOpen,FinalClosed,Goal):-
			asSuc(Open,Closed,NOpen,NClosed,NodeCurrent,Suc,Goal),
			asLoopSuc(NodeCurrent,Successors,NOpen,NClosed,FinalOpen,FinalClosed,Goal).
		
		% A recursive loop for going through each node until the goal node has been reached
		% asCur(+Open,+Closed,-FinalOpen,-FinalClosed,+Goal)
		asCur([(_,NodeCurrent)|_],_,_,_,NodeCurrent).
		asCur([(_,NodeCurrent)|Open],Closed,FinalOpen,FinalClosed,Goal):-
			\+ (NodeCurrent = Goal),
			NodeCurrent = node(street(X,Y),Parent,_),
			findall(Suc,(nextStreet(X,Y,SX,SY),\+ (Parent = node(street(SX,SY),_,_)),Suc=street(SX,SY)),SL),
			asLoopSuc(NodeCurrent,SL,Open,Closed,NOpen,AlmostClosed,Goal),
			NClosed = [NodeCurrent|AlmostClosed],
			asCur(NOpen,NClosed,FinalOpen,FinalClosed,Goal).
			
		% Converts the path to a list PL by taking the parent of each node from the goal until the start node has been reached
		%unWrapPath(+GoalNode,-Pl)
		unWrapPath(node(_,'root',_),[]).
		unWrapPath(node(street(X,Y),P,_),L):-unWrapPath(P,NL),append(NL,[(X,Y)],L).
		
		%Finds the path from (FX, FY) To (TX, TY) by using an A* algorithm
		% aStarSearchOnStreet( (+FX,+FY), (+TX,+TY), -Path, -Cost)
		aStarSearchOnStreet((FX,FY),(TX,TY),Path,Cost):-
			EndNode = node(street(TX,TY),_,Cost),
			asCur([(0,node(street(FX,FY),'root',0))],[],_,_,EndNode),
			unWrapPath(EndNode,Path).
			
		% ----- A* algorithm End -----
			
		% finds the closets tile that has not been explored yet according to the knowledge base.
		% returns a path to that tile, from the agents current position
		% closestUnexplored(-ShortPath)
		closestUnexplored(ShortPath) :-
			findall((Cost,Path),( street(ToX,ToY),
			( \+ explored(ToX,ToY) ), 
			( \+ position(ToX,ToY) ), position(FX,FY), 
			aStarSearchOnStreet((FX,FY),(ToX,ToY),Path,Cost)),UnexloredList),
			sort(UnexloredList,S),
			S = [(_,ShortPath)|_].
	}
	
	beliefs{
		% The route is initialized a nothing, since the agent knows nothing about the world yet
		route([]).
	}
	
	goals{
		
	}
	
	program {
        
    }
	
	actionspec {
	
		% Clears the move taken from the planned route
		move(X,Y) {
			pre { route([(MX,MY)|L]) }
			post { not( route([(MX,MY)|L])), route(L)  }
		}
		
		release {
			pre { true }
			post { true }
		}
		
		grab {
			pre { true }
			post { true }
		}
		
		
	}
}
	
main module{
	program {
		% Checks if the agent is standing on a dropzone and is holding a package, if so it releases the package
		if bel(position(Tx,Ty), on(Tx,Ty,dropzone), percept(holdingPackage) ) then release.
		
		% Checks if the agent is standing on a package and is currently not holding a package, if so it grabs the package
		if bel(position(Tx,Ty), on(Tx,Ty,package), not( percept(holdingPackage) )) then grab.
		
		% Moves to the next tile bases on the route it has planned
		if bel( route([(X,Y)|_]), calcMoveVector((X,Y),(VX,VY))) then move(VX,VY).
	}
}

event module{
	program{
		% Updates the agent's speed and position as they are recieved from the engine
		if bel( percept(position(_,_)), position(X,Y)) then delete ( position(X,Y) ).
		if bel( percept(position(X,Y)) ) then insert ( position(X,Y) ).
		if bel( percept(speed(X)) ) then insert ( speed(X) ).
		
		% Updates the agent's knowledge base if it can see either a package or a dropzone
		if bel( V = vision(_,_,_), percept(V), visionContainsAt(V, package, Tx, Ty) ) then insert (on(Tx, Ty, package)).
		if bel( on(Tx,Ty,package), percept(vision(X, Y, L)), transpose((X, Y), (Tx, Ty)), \+ member(package,L) ) then delete (on(Tx,Ty,package)).
		if bel( V = vision(_,_,_), percept(V), visionContainsAt(V, dropzone, Tx, Ty) ) then insert (on(Tx, Ty, dropzone)).
		
		% Updates the agent's knowledge base on new streets(Tiles without walls) it can see
		forall bel (percept(V), V = vision(X,Y,Ents), findStreet(V), transpose( (X,Y),(Nx,Ny)) ) do insert (street(Nx,Ny)).
		
		% Updates the agent's knowledge base if it can determine if any of its streets
		% are considered explored(ei. it knows about all adjacent tiles to a given street)
		forall bel ( V = vision(_,_,_), 
					percept(V), 
					findStreet(V), 
					transposedVision(V,vision(X,Y,_)), 
					not( explored(X,Y) ), 
					findall((AX,AY),(adjSquare(X,Y,AX,AY), 
					AdjVision = vision(_,_,_), percept(AdjVision), 
					transposedVision(AdjVision,vision(AX,AY,_))) , VT), 
					isSquareExplored(X,Y,VT) ) 
			   do insert ( explored(X,Y) ).
		
		% Clears the route if it has no path
		forall bel ( route([]) ) do delete ( route([]) ).
		
		% if the agent is holding a package and knows the location of a drop zone, then the agent plans a route the drop zone
		if bel ( not(route(_)), percept(holdingPackage), on(X,Y, dropzone), position(PX,PY), aStarSearchOnStreet((PX,PY),(X,Y),Path,_) ) 
		   then insert ( route(Path) ).
		
		% if the agent is not holding a package and knows the location of a package then the agents plans a route to that package
		if bel ( not(route(_)), not ( percept(holdingPackage) ), on(X,Y, package), position(PX,PY), aStarSearchOnStreet((PX,PY),(X,Y),Path,_) ) 
		   then insert ( route(Path) ).
		
		% if the agent has nothing better to do it will explore the clostest tile that has not beed explored.
		if bel ( not(route(_)), closestUnexplored(Path) ) then insert ( route(Path) ).
		
		
	}
}
