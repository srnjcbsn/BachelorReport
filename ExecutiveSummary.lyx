#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Our project is about designing a multiagent system with goal.
 In doing this we will design and implement an engine for designing environments
 in which agents can act.
 The engine will be capable of running multiple agents and they will be
 able to communicate with each other.
 This engine can be used to fill multiple roles such as designing a video
 game, design a world populated only with agents or even be used for testing
 individual agents.
 
\end_layout

\begin_layout Standard
The engine will use a general interface for communicating with agents, so
 that it can work with any language.
 But it will also come with a full implementation of EIS
\begin_inset Foot
status open

\begin_layout Plain Layout
Environment Standard Interface
\end_layout

\end_inset

 which is a standardized interface between environments and agents, which
 supported to work with languages such as Goal and Jason.
 
\end_layout

\begin_layout Standard
The engine will be completely modularized using the MVC
\begin_inset Foot
status open

\begin_layout Plain Layout
Model view controller
\end_layout

\end_inset

 design pattern, this will tie into our idea of making an engine capable
 of handling different Agent languages, since the model
\begin_inset Foot
status open

\begin_layout Plain Layout
inhabitants of the world in the engine
\end_layout

\end_inset

, will not care if they are controlled by a Jason program or a Goal program.
 
\end_layout

\begin_layout Standard
The engine will come with a simple 2D top down view using Unity
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
www.unity3d.com
\end_layout

\end_inset

 and a Top down view in a text based console.
 This will allow the user of the engine to design and test their agent program
 in a fast loading console but will allow him to switch to a nicer looking
 environment once the program is working as expected.
 
\end_layout

\begin_layout Standard
The engine will run using .NET platform fully capable of running in the Mono
 platform as well as the windows platform, The EIS implementation is designed
 for Java and will communicate with our engine using XML encoding.
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
While the EIS standard makes it easy to set up a basic environment capable
 of communicating with certain MAS languages, the user still has to design
 the actual environment and display it.
 Our goal is to provide an engine for designing a world in which agents
 written in any MAS language (GOAL, Jason, etc.) can interact with each other
 as well as the environment.
 Furthermore, we will use the API to develop a world occupied by GOAL agents
 with organizational behaviour.
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Section
Interface agnosticity
\end_layout

\begin_layout Standard
The focus on the design of the game engine have been on making it as generic
 as possible, and we have been careful not to tie it to GOAL or EIS.
 
\end_layout

\begin_layout Standard
We have implemented the general concepts of percepts and actions without
 requirements as to what they contain and how they are structured.
 Instead, the designer writes converters, which can transform percepts and
 actions to and from foreign types.
 
\end_layout

\begin_layout Standard
In the same way, we have not implemented a way of displaying the world.
 Instead, we provide classes which can listen to events triggered by the
 world and the entities in it.
 These classes can then be used to produce any desired output.
\end_layout

\begin_layout Section
Virtual World
\end_layout

\begin_layout Standard
An 
\emph on
agent
\emph default
 in the game engine is an entity capable of performing actions and gathering
 percepts.
 An 
\emph on
agent controller
\emph default
 is connected to an agent and knows how to receive actions from and send
 percepts to an environment.
 The 
\emph on
agent server
\emph default
 is responsible for attaching agents to agent controllers.
\end_layout

\begin_layout Subsection
Execution protocol
\end_layout

\begin_layout Standard
We have designed our game engine so that all agents have a thread of their
 own, meaning they can perform actions and receive percepts independent
 of other agents' states.
 This allows for a more fluently running game, as agents do not stop and
 start actions in synchronization.
 It also means that the properties of agents can be more fine grained, eg.
 an agent's speed can be given as an integer indicating the milliseconds
 it takes to move from one tile to another.
 
\end_layout

\begin_layout Standard
When an agent controller receives an action to be executed, its default
 behaviour is to command its associated agent to perform the action, and
 then return immediately.
 When it receives the request to return all percepts, it blocks until the
 agent has some new percepts to be returned.
 This allows us to let the APL backend process any new percepts when for
 example the agent is moving.
 This default behaviour can be overridden if the designer wants to return
 percepts in response to actions.
\end_layout

\begin_layout Section
Glossary
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
AP 
\emph on
Agent Program
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
APL 
\emph on
Agent Programming Language
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EIS 
\emph on
Environment Interface Standard
\emph default
 -- A standard for connecting APs to environments, implemented in Java
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
GOAL An agent programming language
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MAS 
\emph on
Multi Agent System
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MVC 
\emph on
Model-View-Controller
\emph default
 -- A common design pattern
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
XMAS 
\emph on
Cross Platform Multi Agent System 
\emph default
-- name of the environment engine
\end_layout

\end_body
\end_document
