#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Organizational Multi-Agent Systems in GOAL
\end_layout

\begin_layout Author
SÃ¸ren Jacobsen & Jannick Johnsen
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this executive summary we will document our efforts to design an API
 for creation of MAS (Multi Agent System) environments and a reference implement
ation developed with the GOAL agent programming language.
 The API is written in C# and can be used to control multiple agents acting
 and communicating asynchronously in a world.
 As the API is for designing environments, the agents are supposed to receive
 commands from and send percepts to a seperate agent programming language,
 which implements the artificial intelligence of the agents.
 
\end_layout

\begin_layout Standard
In our reference implementation, we have built a tile based game on top
 of the API, in which agents are controlled by GOAL programs.
 
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
While the EIS standard makes it easy to set up a basic environment capable
 of communicating with certain MAS languages, the user still has to design
 the actual environment and display it.
 Our goal is to provide an engine for designing a world in which agents
 written in any MAS language (GOAL, Jason, etc.) can interact with each other
 as well as the environment.
 Furthermore, we will use the API to develop a world occupied by GOAL agents
 with organizational behaviour.
\end_layout

\begin_layout Section
Reference Implementation
\end_layout

\begin_layout Standard
To showcase and test our engine, we have used it to create a simple environment
 with a tile based world.
 In this world, agents are tasked with finding packages in a maze and dropping
 them at a tile containing a 
\family typewriter
dropzone
\family default
 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:maze-scrot"

\end_inset

).
 Agents are controlled by separate GOAL instances with an EIS environment,
 which communicates with the XMAS engine via XML messages passed over sockets.
 The agent programs catalogue the tiles they can see and uses A* search
 to find paths to packages and the dropzone.
 The actions available to an agent are listed below.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TileWorldColoredScrot.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An initial configuration of the package grabber scenario.
 
\family typewriter
D
\family default
 (red) marks the dropzone, 
\family typewriter
X
\family default
s (green) are packages, 
\family typewriter
A
\family default
s (black) are agents and 
\family typewriter
W
\family default
s (grey) are walls
\begin_inset CommandInset label
LatexCommand label
name "fig:maze-scrot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
move(
\emph on
Direction
\emph default
)
\family default
 moves the agent one tile in the specified 
\family typewriter
\emph on
Direction
\family default
\emph default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
grab
\family default
 removes the package in the same tile as the agent (if any) from the world,
 and marks the agent as carrying a package.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
drop
\family default
 adds a package to the world in the same tile as the agent (if it is carrying
 a package) and marks the agent as not carrying a package.
\end_layout

\begin_layout Standard
Additionally, we plan to implement a messaging action, allowing the agents
 to communicate with each other.
 This is particularly necessary when using GOAL, as the GOAL instances have
 no knowledge of each other and thus cannot use the messaging system built
 into GOAL.
\end_layout

\begin_layout Section
The XMAS Engine
\end_layout

\begin_layout Standard
We have implemented our tile based environment by overriding the interfaces
 and abstractions provided by our API.
\end_layout

\begin_layout Subsection
World
\end_layout

\begin_layout Standard
A world in our engine contains a mapping from entities to their position
 in the world, as well as rules specifying how entities should be removed
 and added.
 The world used in our reference implementation also contains the game map,
 a two-dimensional array containing the tiles in the world.
 The position is an abstract definition that can be overridden to fit the
 world in question.
 In the case of our tile based world, it is the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 coordinates of the entity; in a graph-based world it might be the a reference
 to the node the entity is in.
\end_layout

\begin_layout Subsection
Agent Controllers and Servers
\end_layout

\begin_layout Standard
An agent controller is the link between agents in the world and their backend
 agent program; they can receive actions and send percepts back.
 Each controller is connected to exactly one agent program and controls
 exactly on agent in the world.
 In the package grabber scenario, agent controllers connect to an EIS environeme
nt (attached to a GOAL instance) by means of sockets, on which they pass
 actions and percepts back and forth as XML.
 Agent servers are responsioble for connecting controllers to agents.
\end_layout

\begin_layout Standard
When the AP wants to acquire an agent, the basic idea is that it will request
 a certain available agent entity and take control of this entity.
 This will all be done through a manager designed specifically for each
 APL, so that it knows how to handle any special cases.
 After the agent has been acquired, the AI will send a command describing
 which actions it should perform and wait for the agent to perform them.
 This sequence will be repeated until the connection between the agent and
 the AI has been broken.
 
\end_layout

\begin_layout Subsection
Entities, Agents and Modules
\end_layout

\begin_layout Standard
An entity in the envionment is something that exists in a world and may
 be interacted with.
 An agent is an entity capable of performing actions and gathering percepts.
 
\end_layout

\begin_layout Standard
Entities have a set of modules which define their properties.
 In the package grabbing scenario, agents have modules specifying which
 entities blocks movement and vision, as well as a module to to keep track
 of whether or not they are carrying a package.
 
\end_layout

\begin_layout Subsection
Percepts, Actions and Converters
\end_layout

\begin_layout Standard
Percepts are retrieved from agetns via their modules.
 In the tile based world for example, the list of all the tiles an agent
 can see is gotten through the 
\family typewriter
Vision
\family default
 module.
 
\end_layout

\begin_layout Standard
Percepts in the engine are very abstract objects, with no restrictions as
 to what they contain.
 To encode the percepts to a format recognisable to the APL, the designer
 writes percept converters.
 In our reference implementation, we convert them into EIS 
\family typewriter
iilang
\family default
 objects, which can then be serialized to XML and sent to the EIS environment.
\end_layout

\begin_layout Standard
Similarly, actions are parsed from XML to 
\family typewriter
iilang
\family default
 objects and then converted into actions known by the engine.
\end_layout

\begin_layout Subsection
Execution protocol
\end_layout

\begin_layout Standard
We have designed our API so that all agents have a thread of their own,
 meaning they can perform actions and receive percepts independently of
 other agents' states.
 This allows for a more fluently running game, as agents do not necessarily
 stop and start actions in synchronization.
 It also means that the properties of agents can be more fine grained, eg.
 an agent's speed can be given as an integer indicating the milliseconds
 it takes to move from one tile to another (in a tile based world).
 
\end_layout

\begin_layout Standard
When an agent controller receives an action to be executed, its default
 behaviour is to command its associated agent to perform the action, and
 then return immediately.
 When it receives the request to return all percepts, it blocks until the
 agent has some new percepts to be returned (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SequenceDiagram"

\end_inset

).
 This allows us to let the APL backend process any new percepts when for
 example the agent is moving.
 This default behaviour can be overridden if the designer wants to return
 percepts in response to actions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename sequenceDiagram.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SequenceDiagram"

\end_inset

When the EIS method 
\family typewriter
performAction(
\emph on
Action
\emph default
)
\family default
 is called, it sends an XML representation of 
\family typewriter
\emph on
Action
\family default
\emph default
 to the engine over a socket, and immediately returns 
\family typewriter
null
\family default
.
 Next, the GOAL instance begins its percept-action cycle, and calls the
 EIS method 
\family typewriter
getAllPercepts
\family default
, which sends the 
\family typewriter
getAllPercepts
\family default
 action to the engine and 
\family typewriter
read
\family default
s on the socket until the engine has some useful percepts to deliver.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Virtual World
\end_layout

\begin_layout Standard
An 
\emph on
agent
\emph default
 in the API is an entity capable of performing actions and gathering percepts.
 An 
\emph on
agent controller
\emph default
 is connected to an agent and knows how to receive actions from and send
 percepts to the connected APL.
 The 
\emph on
agent server
\emph default
 is responsible for attaching agents to agent controllers.
\end_layout

\begin_layout Subsection
Execution protocol
\end_layout

\begin_layout Standard
We have designed our API so that all agents have a thread of their own,
 meaning they can perform actions and receive percepts independently of
 other agents' states.
 This allows for a more fluently running game, as agents do not necessarily
 stop and start actions in synchronization.
 It also means that the properties of agents can be more fine grained, eg.
 an agent's speed can be given as an integer indicating the milliseconds
 it takes to move from one tile to another (in a tile based world).
 
\end_layout

\begin_layout Standard
When an agent controller receives an action to be executed, its default
 behaviour is to command its associated agent to perform the action, and
 then return immediately.
 When it receives the request to return all percepts, it blocks until the
 agent has some new percepts to be returned.
 This allows us to let the APL backend process any new percepts when for
 example the agent is moving.
 This default behaviour can be overridden if the designer wants to return
 percepts in response to actions.
\end_layout

\begin_layout Section
Interfacing with EIS
\end_layout

\begin_layout Standard
All APLs that needs to interact with the world will need an interface designed
 with our API.
 Fortunately, a lot of APLs can use EIS (Environment Interface Standard).
 Since our engine is designed using C# and EIS is implemented in Java, we
 use a local TCP connection between EIS and our engine (see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interaction-between-GOAL,"

\end_inset

).
 
\end_layout

\begin_layout Standard
As mentioned, all agents in the API execute asynchronously in their own
 thread.
 GOAL, however, seems to be designed to run all agents sequentially in a
 single thread, which means that if a single agent blocks in the call to
 get all its percepts from the environment (because the environment only
 returns when the agentâs current action is fully performed), no other agents
 can continue execution until the call returns.
 One way to circumvent this is to use 
\emph on
durative actions
\emph default
 (as explained in the GOAL user manual).
 With this method an ongoing action is started through GOAL, and in each
 percept cycle GOAL evaluates whether the agent should continue executing
 the action or choose another.
 The problem with this approach is that we are effectively polling the environme
nt through GOAL; the agent may not have any new information in each percept
 cycle, and it may sit idle, waiting for the next percept cycle when it
 has finished the action.
 
\end_layout

\begin_layout Standard
In order to have a more dynamic, responsive and efficient system, we have
 chosen to launch a GOAL environment for each agent.
 This means that the agents will have to share communicate through the environme
nt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename OverviewOfGoalEISEngine.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interaction-between-GOAL,"

\end_inset

Interaction between GOAL, EIS, and XMAS
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Glossary
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
AP 
\emph on
Agent Program
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
APL 
\emph on
Agent Programming Language
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EIS 
\emph on
Environment Interface Standard
\emph default
 -- A standard for connecting APs to environments, implemented in Java
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
GOAL An agent programming language
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MAS 
\emph on
Multi Agent System
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MVC 
\emph on
Model-View-Controller
\emph default
 -- A common design pattern
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
XMAS 
\emph on
Cross Platform Multi Agent System 
\emph default
-- name of the environment engine
\end_layout

\end_body
\end_document
