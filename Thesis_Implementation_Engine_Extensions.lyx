#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Engine Extensions
\end_layout

\begin_layout Subsection
Tile Extension
\end_layout

\begin_layout Subsubsection*
Vision
\end_layout

\begin_layout Standard
As the basic rules for which tiles can be seen from where have been explained
 in the System Features section, we will now turn our attention to how corners
 are connected with each other.
 
\end_layout

\begin_layout Standard
Recall that a corner 
\begin_inset Formula $c_{1}$
\end_inset

 on a tile 
\begin_inset Formula $t_{1}$
\end_inset

 connects to a corner 
\begin_inset Formula $c_{2}$
\end_inset

 of another tile 
\begin_inset Formula $t_{2}$
\end_inset

 if a straight line can be traced from 
\begin_inset Formula $c_{1}$
\end_inset

 to 
\begin_inset Formula $c_{2}$
\end_inset

 without intersecting with a tile that is blocking the line.
 In the tile extension, a tile is blocking the line if it contains an entity
 that is movement blocking with respect to the entity looking from 
\begin_inset Formula $t_{1}$
\end_inset

.
 Additionally, the tile 
\begin_inset Formula $t_{2}$
\end_inset

 is visible from 
\begin_inset Formula $t_{1}$
\end_inset

 if at least one corner of 
\begin_inset Formula $t_{1}$
\end_inset

 connects to at least three corners of 
\begin_inset Formula $t_{2}$
\end_inset

.
 If 
\begin_inset Formula $t_{2}$
\end_inset

 is vision blocking, only two corners of 
\begin_inset Formula $t_{2}$
\end_inset

 need be connected to.
 In its most simple form, the algorithm iterates over all the tiles in the
 agent's visible range, and returns a collection containing just those satisfyin
g the above condition.
 
\end_layout

\begin_layout Standard
The interesting part of the algorithm is this: how do we find all the tiles
 a line from one corner to another passes through? 
\family typewriter
\emph on
[Figure]
\family default
\emph default
 To accomplish this, we find the slope of the line as 
\begin_inset Formula $\left|\frac{v_{x}}{v_{y}}\right|$
\end_inset

, where 
\begin_inset Formula $v$
\end_inset

 is the vector describing the line.
 If either 
\begin_inset Formula $v_{x}$
\end_inset

 or 
\begin_inset Formula $v_{y}$
\end_inset

 is zero, the line only passes between tiles, and it is handled as a special
 case.
\end_layout

\begin_layout Standard

\family typewriter
\emph on
[Explain that it is similar to that other algorithm (name?)]
\end_layout

\begin_layout Subsection
EIS Extension
\end_layout

\begin_layout Standard
EIS support to the engine to the engine is provided with a special 
\family typewriter
AgentController/AgentManager 
\family default
class, along with a specially designed java EIS environment jar file.
 This section will go through how the implementation works and how we connect
 to the EIS environment.
\end_layout

\begin_layout Standard
The EIS environment in java and the agent controller on the engine is connected
 through a TCP connection.
 They commicate with each other with XML as a markup language for the data
 they transmit.
 
\end_layout

\begin_layout Standard
Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DeploymentEISandAgentController"

\end_inset

 shows the setup between EIS and the agent controller.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DeploymentEISandAgentController.png
	lyxscale 5
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An illustration of the connection between the EIS environment and the agent
 controller.
\begin_inset CommandInset label
LatexCommand label
name "fig:DeploymentEISandAgentController"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the EIS environment and the agent controller sends all data in
 form of XML data there is one difference and that is all XML nodes are
 packaged into packages of a certain size and the size is sent before the
 xml data.
\end_layout

\begin_layout Standard
This was done to ensure that the agent controller at all times knew how
 much data was to be transmitted, thus giving it the right to deny packages
 if they were over a certain size.
 In our current implementation however no package size is denied.
 
\end_layout

\begin_layout Subsubsection*
Engine Side of EIS Support
\end_layout

\begin_layout Standard
In the project: 
\family typewriter
XmasEngineExtensions 
\family default
we provide two classes:
\end_layout

\begin_layout Description

\family typewriter
EISAgentController:
\family default
 this class is responsible for converting xml data from the EIS environment
 into actions that can be queued to the agent it controls.
 And also for converting percepts the agent it controls receives into XML
 data that can be sent to the EIS environment.
\end_layout

\begin_layout Description

\family typewriter
EISAgentServer
\family default
 creates a TCP server all EIS environments that wishes to connect to it
 must make a TCP client call, once a connection is established then the
 agent server will construct an 
\family typewriter
EISAgentController 
\family default
object, that object will take over all further duties of comuncation.
\end_layout

\begin_layout Subsubsection*
How the EISAgentServer works
\end_layout

\end_body
\end_document
