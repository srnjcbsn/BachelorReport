#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{alltt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Engine Extensions
\end_layout

\begin_layout Subsection
Tile Extension
\begin_inset CommandInset label
LatexCommand label
name "sub:ImplementationTileExtension"

\end_inset


\end_layout

\begin_layout Subsubsection*
Vision
\end_layout

\begin_layout Standard
As the basic rules for which tiles can be seen from where have been explained
 in the System Features section, we will now turn our attention to how corners
 are connected with each other.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tilemapVision.png
	lyxscale 30
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
In this figure we see the visibility of selected tiles 
\begin_inset Formula $\mathtt{T}_{1}\dots\mathtt{T}_{4}$
\end_inset

with regards to the agent in position 
\begin_inset Formula $\mathtt{A}$
\end_inset

.
 The light gray squares represent vision blocking tiles, and all other tiles
 are see-through.
 Lines have been drawn from the corners of the agent's tile to the corners
 of the selected tiles.
 Green lines signifies that the two corners connect, whereas red lines means
 they are not connected.
 Tiles 
\begin_inset Formula $\mathtt{T}_{1}$
\end_inset

, 
\begin_inset Formula $\mathtt{T}_{2}$
\end_inset

 and 
\begin_inset Formula $\mathtt{T}_{4}$
\end_inset

 are visible to the agent, while 
\begin_inset Formula $\mathtt{T}_{3}$
\end_inset

 is obscured.
\begin_inset CommandInset label
LatexCommand label
name "fig:TileMapVision"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We say that a corner 
\begin_inset Formula $c_{1}$
\end_inset

 on a tile 
\begin_inset Formula $t_{1}$
\end_inset

 connects to a corner 
\begin_inset Formula $c_{2}$
\end_inset

 of another tile 
\begin_inset Formula $t_{2}$
\end_inset

 if a straight line can be traced from 
\begin_inset Formula $c_{1}$
\end_inset

 to 
\begin_inset Formula $c_{2}$
\end_inset

 without intersecting with a tile that is blocking the line.
 In the tile extension, a tile is blocking the line if it contains an entity
 that is vision blocking with respect to the entity looking from 
\begin_inset Formula $t_{1}$
\end_inset

.
 This presents a problem with a line whose vector has an 
\begin_inset Formula $x$
\end_inset

 or 
\begin_inset Formula $y$
\end_inset

 component equal to 0.
 As such a line never intersects with any tiles (it only passes between
 them), it will always connect with the rules stated above, even if all
 tiles it passes are vision blocking.
 Thus, we say that a line which only extends in the 
\begin_inset Formula $x$
\end_inset

 or 
\begin_inset Formula $y$
\end_inset

 direction does not connect if it passes between two vision blocking tiles.
\end_layout

\begin_layout Standard
Recall that the tile 
\begin_inset Formula $t_{2}$
\end_inset

 is visible from 
\begin_inset Formula $t_{1}$
\end_inset

 if at least one corner of 
\begin_inset Formula $t_{1}$
\end_inset

 connects to at least three corners of 
\begin_inset Formula $t_{2}$
\end_inset

.
 If 
\begin_inset Formula $t_{2}$
\end_inset

 is vision blocking, only two corners of 
\begin_inset Formula $t_{2}$
\end_inset

 need be connected to.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TileMapVision"

\end_inset

 we have shown some examples of connecting corners.
 Note that the line from the SE corner of 
\family typewriter
A
\family default
 to the SW corner of 
\begin_inset Formula $\mathtt{T}_{3}$
\end_inset

 does not connect, as it passes between two vision blocking tiles, as described
 above.
 Also note that 
\begin_inset Formula $\mathtt{T}_{4}$
\end_inset

 should, intuitively, be obscured to the agent; we should have a rule saying
 that when a line intersects with a corner, it should be blocked if both
 of the two tiles that are connected to the corner, and is not intersected
 by the line, are vision blocking.
\end_layout

\begin_layout Standard
In its most simple form, the vision algorithm iterates over all the tiles
 in the agent's visible range, and returns a collection containing just
 those satisfying the above condition, as shown in the pseudo code below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{alltt}
\end_layout

\begin_layout Plain Layout


\backslash
textit{Method} Vision 
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{takes} an Agent A, 
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{returns} a collection of Tiles
\end_layout

\begin_layout Plain Layout

    Tiles : Collection of Tiles
\end_layout

\begin_layout Plain Layout

    for each Tile T in A's visible range:
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{if} T.isVisionBlocking(A):
\end_layout

\begin_layout Plain Layout

            
\backslash
textit{if} any one corner of A connects with any two corners of T:
\end_layout

\begin_layout Plain Layout

                add T to Tiles
\end_layout

\begin_layout Plain Layout

        
\backslash
textit{else}:
\end_layout

\begin_layout Plain Layout

            
\backslash
textit{if} any one corner of A connects with any three corners of T:
\end_layout

\begin_layout Plain Layout

                add T to Tiles
\end_layout

\begin_layout Plain Layout

    
\backslash
textit{return} T
\end_layout

\begin_layout Plain Layout


\backslash
end{alltt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tilemapConnection.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A line described by the vector 
\begin_inset Formula $v=(3,4)$
\end_inset

 with slope 
\begin_inset Formula $s=\frac{v_{y}}{v_{x}}=\frac{4}{3}$
\end_inset

.
 Squares in light gray are tiles the line intersect with.
\begin_inset CommandInset label
LatexCommand label
name "fig:ConnectingLine"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The interesting part of the algorithm is this: how do we determine whether
 two corners connect? That is, how do we find all the tiles a line from
 one corner to another passes through? To illustrate the problem, consider
 the line depicted in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ConnectingLine"

\end_inset

.
 First, we find the slope of the line as 
\begin_inset Formula $s=\frac{v_{y}}{v_{x}}$
\end_inset

, where 
\begin_inset Formula $v$
\end_inset

 is the vector describing the line.
 If we consider the line's equation (
\begin_inset Formula $y=s\cdot x$
\end_inset

), as it is depicted in the figure, we can see that the line segment decribed
 by the vector between the points 
\begin_inset Formula $\left(x_{0},s\cdot x_{0}\right)$
\end_inset

 and 
\begin_inset Formula $\left(x_{0}+1,s\cdot\left(x_{0}+1\right)\right)$
\end_inset

 (where 
\begin_inset Formula $x_{0}\in\mathbb{N}$
\end_inset

) crosses the tiles between 
\begin_inset Formula $x=x_{0}$
\end_inset

 and 
\begin_inset Formula $x=x_{0}+1$
\end_inset

 on the 
\begin_inset Formula $x$
\end_inset

-axis and 
\begin_inset Formula $y=\left\lfloor s\cdot x_{0}\right\rfloor $
\end_inset

 and 
\begin_inset Formula $y=\left\lceil s\cdot\left(x_{0}+1\right)\right\rceil $
\end_inset

 on the 
\begin_inset Formula $y$
\end_inset

 axis.
 This can be repeated for every 
\begin_inset Formula $x_{0}$
\end_inset

 in the range 
\begin_inset Formula $0\dots v_{x}$
\end_inset

 to obtain the complete collection of intersected tiles.
\end_layout

\begin_layout Standard
Additional complications occur when 
\begin_inset Formula $v$
\end_inset

 has negative components, or when 
\begin_inset Formula $v_{x}$
\end_inset

 or 
\begin_inset Formula $v_{y}$
\end_inset

 is zero, but this outlines the basic principle of the algorithm.
\end_layout

\begin_layout Subsection
EIS Extension
\end_layout

\begin_layout Standard
EIS support to the engine to the engine is provided with a special 
\family typewriter
AgentController/AgentManager 
\family default
class, along with a specially designed java EIS environment jar file.
 This section will go through how the implementation works and how we connect
 to the EIS environment.
\end_layout

\begin_layout Standard
The EIS environment in java and the agent controller on the engine is connected
 through a TCP connection.
 They commicate with each other with XML as a markup language for the data
 they transmit.
 
\end_layout

\begin_layout Standard
Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DeploymentEISandAgentController"

\end_inset

 shows the setup between EIS and the agent controller.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DeploymentEISandAgentController.png
	lyxscale 5
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An illustration of the connection between the EIS environment and the agent
 controller.
\begin_inset CommandInset label
LatexCommand label
name "fig:DeploymentEISandAgentController"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the EIS environment and the agent controller sends all data in
 form of XML data there is one difference and that is all XML nodes are
 packaged into packages of a certain size and the size is sent before the
 xml data, as can be seen in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DataPackaging"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename XMLDataPackageFigure.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Image of the data sent between the EIS environment and the agent controller.
\begin_inset CommandInset label
LatexCommand label
name "fig:DataPackaging"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This was done to ensure that the agent controller at all times knew how
 much data was to be transmitted, thus giving it the right to deny packages
 if they were over a certain size.
 In our current implementation however no package size is denied.
 
\end_layout

\begin_layout Subsubsection*
Engine Side of EIS Support
\end_layout

\begin_layout Standard
In the project: 
\family typewriter
XmasEngineExtensions 
\family default
we provide two classes:
\end_layout

\begin_layout Description

\family typewriter
EISAgentController:
\family default
 this class is responsible for converting xml data from the EIS environment
 into actions that can be queued to the agent it controls.
 And also for converting percepts the agent it controls receives into XML
 data that can be sent to the EIS environment.
\end_layout

\begin_layout Description

\family typewriter
EISAgentServer
\family default
 creates a TCP server all EIS environments that wishes to connect to it
 must make a TCP client call, once a connection is established then the
 agent server will construct an 
\family typewriter
EISAgentController 
\family default
object, that object will take over all further duties of comuncation.
\end_layout

\begin_layout Subsubsection*
How the EISAgentServer works
\end_layout

\begin_layout Standard
The server manages the agent controllers and it also manages the connection
 creation between an EIS environment and an 
\family typewriter
EisAgentController
\family default
.
\end_layout

\begin_layout Standard
On Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EISServerSequenceDiagram"

\end_inset

 is shown how an EIS environment connects to an agent server and how the
 agent server handles the connection.
 The connection works by the EIS environment making a TCP connection request
 the agent server then responds by constructing the agent controller( and
 give it, its own thread).
 Once the agent controller is constructed the agent server is no longer
 responsible for handling that connection and leaves it up to the agent
 controller to find out what the EIS environment wants.
 This is basically to connect to a given agent whom it knows by name, and
 start sending it actions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename EISServerSequenceDiagram.png
	lyxscale 10
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
a sequence diagram of an EIS environment connecting to the engine through
 an EisAgentServer.
\begin_inset CommandInset label
LatexCommand label
name "fig:EISServerSequenceDiagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
How the EisAgentController works
\end_layout

\begin_layout Standard
The EIS agent controller job is to ensure that all demands made by an EIS
 environment is fulfilled, this is done by receiving actions in XML data
 form, and convert the data into Xmas Actions.
 These actions are then queued onto an agent.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename EisAgentControllerSequenceDiagram.png
	lyxscale 10
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A sequence diagram showing how XML data from EIS environment are converted
 into Xmas data.
\begin_inset CommandInset label
LatexCommand label
name "fig:EisAgentControllerSequenceDiagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
On fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EisAgentControllerSequenceDiagram"

\end_inset

, is shown how xml data received is converted by the controller and then
 sent to the agent inside the engine.
 Percepts are only sent if they are updated in this case the action was
 to get percepts however if the action was to move an agent, then no percepts
 would be sent the controller.
\end_layout

\begin_layout Subsubsection*
EIS Environment
\end_layout

\begin_layout Standard
The EIS environment is designed to setup an interface between an APL and
 an environment built in java.
 As our engine is built In C#, we cannot use the EIS as it was supposed
 to.
 The way we use EIS instead is by making it a hollow link between our engine
 and the APL(such as GOAL).
 Thus the EIS environment implementation we make must be able to provide
 communication between the APL and our engine.
 The way we have done this is by making the environment convert all the
 XML data it receives into the EIS data-structures for percepts.
 Which is one of the classes that EIS provides, it all provides the means
 to directly convert the data structures into prolog code which is used
 by GOAL to understand the data.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename EISEnvironmentToGoalSequenceDiagram.png
	lyxscale 10
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This diagram shows how the communication between goal and the EIS environment
 works.
\begin_inset CommandInset label
LatexCommand label
name "fig:EISEnvironmentToGoalSequenceDiagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
An example of sequence for the EIS environment communicating with an APL(such
 as GOAL) can be seen on fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EISEnvironmentToGoalSequenceDiagram"

\end_inset

.
 The basic idea is that the goal program sends commands directly to the
 EIS environment we have implemented and then we ensure that those commands
 are fulfilled by transmitting them over to the 
\family typewriter
EisAgentController
\family default
, through a TCP connection.
\end_layout

\begin_layout Subsection*
Considerations
\end_layout

\begin_layout Standard
The design of interfacing with goal was originally what the engine design
 was mostly focused on; as such there have been lots of different approaches
 to this interfacing that we have gone through.
 One approach was to connect the EIS environment using J# which could be
 converted into C# byte code; this would be a lot faster than our current
 approach since XML data wastes a lot of space by encapsulating every bit
 of information.
 However J# is an old language and we wanted to ensure that we did not run
 into too many complications under development as such we chose our current
 approach since the real time transmission of data is not as important as
 the idea of it, for this project in particular.
 
\end_layout

\begin_layout Subsection*
Summary
\end_layout

\begin_layout Standard
EIS is an interface for designing environments in java that connects to
 EIS supported APLs, we use this environment to develop an environment that
 is simply a TCP connection between the APL(in our case goal) and our engine.
 The design provides the necessary features to the engine, but the design
 could have been more optimized by using a more compact way of sending data,
 since sending data as XML nodes takes up a lot of space since XML requires
 all data to be encapsulated by it.
\end_layout

\end_body
\end_document
